{"ast":null,"code":"const SafeEventEmitter = require('safe-event-emitter');\n\nclass BaseFilter extends SafeEventEmitter {\n  constructor() {\n    super();\n    this.updates = [];\n  }\n\n  async initialize() {}\n\n  async update() {\n    throw new Error('BaseFilter - no update method specified');\n  }\n\n  addResults(newResults) {\n    this.updates = this.updates.concat(newResults);\n    newResults.forEach(result => this.emit('update', result));\n  }\n\n  addInitialResults(newResults) {}\n\n  getChangesAndClear() {\n    const updates = this.updates;\n    this.updates = [];\n    return updates;\n  }\n\n}\n\nmodule.exports = BaseFilter;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/eth-json-rpc-filters/base-filter.js"],"names":["SafeEventEmitter","require","BaseFilter","constructor","updates","initialize","update","Error","addResults","newResults","concat","forEach","result","emit","addInitialResults","getChangesAndClear","module","exports"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AAEA,MAAMC,UAAN,SAAyBF,gBAAzB,CAA0C;AAExCG,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,OAAL,GAAe,EAAf;AACD;;AAED,QAAMC,UAAN,GAAoB,CAAE;;AAEtB,QAAMC,MAAN,GAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDC,EAAAA,UAAU,CAAEC,UAAF,EAAc;AACtB,SAAKL,OAAL,GAAe,KAAKA,OAAL,CAAaM,MAAb,CAAoBD,UAApB,CAAf;AACAA,IAAAA,UAAU,CAACE,OAAX,CAAmBC,MAAM,IAAI,KAAKC,IAAL,CAAU,QAAV,EAAoBD,MAApB,CAA7B;AACD;;AAEDE,EAAAA,iBAAiB,CAAEL,UAAF,EAAc,CAAE;;AAEjCM,EAAAA,kBAAkB,GAAI;AACpB,UAAMX,OAAO,GAAG,KAAKA,OAArB;AACA,SAAKA,OAAL,GAAe,EAAf;AACA,WAAOA,OAAP;AACD;;AAxBuC;;AA4B1CY,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["const SafeEventEmitter = require('safe-event-emitter')\r\n\r\nclass BaseFilter extends SafeEventEmitter {\r\n\r\n  constructor () {\r\n    super()\r\n    this.updates = []\r\n  }\r\n\r\n  async initialize () {}\r\n\r\n  async update () {\r\n    throw new Error('BaseFilter - no update method specified')\r\n  }\r\n\r\n  addResults (newResults) {\r\n    this.updates = this.updates.concat(newResults)\r\n    newResults.forEach(result => this.emit('update', result))\r\n  }\r\n\r\n  addInitialResults (newResults) {}\r\n\r\n  getChangesAndClear () {\r\n    const updates = this.updates\r\n    this.updates = []\r\n    return updates\r\n  }\r\n  \r\n}\r\n\r\nmodule.exports = BaseFilter\r\n"]},"metadata":{},"sourceType":"script"}