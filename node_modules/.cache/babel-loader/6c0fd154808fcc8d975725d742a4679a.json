{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect,useMemo,useRef}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import useDebounce from'../../hooks/useDebounce';import chunkArray from'../../utils/chunkArray';import{CancelledError,retry,RetryableError}from'../../utils/retry';import{useBlockNumber}from'../application/hooks';import{errorFetchingMulticallResults,fetchingMulticallResults,parseCallKey,updateMulticallResults}from'./actions';// chunk calls so we do not exceed the gas limit\nvar CALL_CHUNK_SIZE=500;/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */function fetchChunk(_x,_x2,_x3){return _fetchChunk.apply(this,arguments);}/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */function _fetchChunk(){_fetchChunk=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(multicallContract,chunk,minBlockNumber){var resultsBlockNumber,returnData,_yield$multicallContr,_yield$multicallContr2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return multicallContract.aggregate(chunk.map(function(obj){return[obj.address,obj.callData];}));case 3:_yield$multicallContr=_context.sent;_yield$multicallContr2=_slicedToArray(_yield$multicallContr,2);resultsBlockNumber=_yield$multicallContr2[0];returnData=_yield$multicallContr2[1];_context.next=13;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.info('Failed to fetch chunk inside retry',_context.t0);throw _context.t0;case 13:if(!(resultsBlockNumber.toNumber()<minBlockNumber)){_context.next=15;break;}throw new RetryableError('Fetched for old block number');case 15:return _context.abrupt(\"return\",{results:returnData,blockNumber:resultsBlockNumber.toNumber()});case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return _fetchChunk.apply(this,arguments);}export function activeListeningKeys(allListeners,chainId){if(!allListeners||!chainId)return{};var listeners=allListeners[chainId];if(!listeners)return{};return Object.keys(listeners).reduce(function(memo,callKey){var keyListeners=listeners[callKey];memo[callKey]=Object.keys(keyListeners).filter(function(key){var blocksPerFetch=parseInt(key);if(blocksPerFetch<=0)return false;return keyListeners[blocksPerFetch]>0;}).reduce(function(previousMin,current){return Math.min(previousMin,parseInt(current));},Infinity);return memo;},{});}/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */export function outdatedListeningKeys(callResults,listeningKeys,chainId,latestBlockNumber){if(!chainId||!latestBlockNumber)return[];var results=callResults[chainId];// no results at all, load everything\nif(!results)return Object.keys(listeningKeys);return Object.keys(listeningKeys).filter(function(callKey){var blocksPerFetch=listeningKeys[callKey];var data=callResults[chainId][callKey];// no data, must fetch\nif(!data)return true;var minDataBlockNumber=latestBlockNumber-(blocksPerFetch-1);// already fetching it for a recent enough block, don't refetch it\nif(data.fetchingBlockNumber&&data.fetchingBlockNumber>=minDataBlockNumber)return false;// if data is older than minDataBlockNumber, fetch it\nreturn!data.blockNumber||data.blockNumber<minDataBlockNumber;});}export default function Updater(){var dispatch=useDispatch();var state=useSelector(function(s){return s.multicall;});// wait for listeners to settle before triggering updates\nvar debouncedListeners=useDebounce(state.callListeners,100);var latestBlockNumber=useBlockNumber();var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var multicallContract=useMulticallContract();var cancellations=useRef();var listeningKeys=useMemo(function(){return activeListeningKeys(debouncedListeners,chainId);},[debouncedListeners,chainId]);var unserializedOutdatedCallKeys=useMemo(function(){return outdatedListeningKeys(state.callResults,listeningKeys,chainId,latestBlockNumber);},[chainId,state.callResults,listeningKeys,latestBlockNumber]);var serializedOutdatedCallKeys=useMemo(function(){return JSON.stringify(unserializedOutdatedCallKeys.sort());},[unserializedOutdatedCallKeys]);useEffect(function(){var _cancellations$curren;if(!latestBlockNumber||!chainId||!multicallContract)return;var outdatedCallKeys=JSON.parse(serializedOutdatedCallKeys);if(outdatedCallKeys.length===0)return;var calls=outdatedCallKeys.map(function(key){return parseCallKey(key);});var chunkedCalls=chunkArray(calls,CALL_CHUNK_SIZE);if(((_cancellations$curren=cancellations.current)===null||_cancellations$curren===void 0?void 0:_cancellations$curren.blockNumber)!==latestBlockNumber){var _cancellations$curren2,_cancellations$curren3;(_cancellations$curren2=cancellations.current)===null||_cancellations$curren2===void 0?void 0:(_cancellations$curren3=_cancellations$curren2.cancellations)===null||_cancellations$curren3===void 0?void 0:_cancellations$curren3.forEach(function(c){return c();});}dispatch(fetchingMulticallResults({calls:calls,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));cancellations.current={blockNumber:latestBlockNumber,cancellations:chunkedCalls.map(function(chunk,index){var _retry=retry(function(){return fetchChunk(multicallContract,chunk,latestBlockNumber);},{n:Infinity,minWait:2500,maxWait:3500}),cancel=_retry.cancel,promise=_retry.promise;promise.then(function(_ref){var returnData=_ref.results,fetchBlockNumber=_ref.blockNumber;cancellations.current={cancellations:[],blockNumber:latestBlockNumber};// accumulates the length of all previous indices\nvar firstCallKeyIndex=chunkedCalls.slice(0,index).reduce(function(memo,curr){return memo+curr.length;},0);var lastCallKeyIndex=firstCallKeyIndex+returnData.length;dispatch(updateMulticallResults({chainId:chainId,results:outdatedCallKeys.slice(firstCallKeyIndex,lastCallKeyIndex).reduce(function(memo,callKey,i){var _returnData$i;memo[callKey]=(_returnData$i=returnData[i])!==null&&_returnData$i!==void 0?_returnData$i:null;return memo;},{}),blockNumber:fetchBlockNumber}));}).catch(function(error){if(error instanceof CancelledError){console.error('Cancelled fetch for blockNumber',latestBlockNumber);return;}console.error('Failed to fetch multicall chunk',chunk,chainId,error);dispatch(errorFetchingMulticallResults({calls:chunk,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));});return cancel;})};},[chainId,multicallContract,dispatch,serializedOutdatedCallKeys,latestBlockNumber]);return null;}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/state/multicall/updater.tsx"],"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","aggregate","map","obj","address","callData","resultsBlockNumber","returnData","console","info","toNumber","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","s","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","length","calls","chunkedCalls","forEach","c","index","n","minWait","maxWait","cancel","promise","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","catch","error"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport useDebounce from '../../hooks/useDebounce'\r\nimport chunkArray from '../../utils/chunkArray'\r\nimport { CancelledError, retry, RetryableError } from '../../utils/retry'\r\nimport { useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  Call,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  parseCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\n\r\n// chunk calls so we do not exceed the gas limit\r\nconst CALL_CHUNK_SIZE = 500\r\n\r\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\r\nasync function fetchChunk(\r\n  multicallContract: Contract,\r\n  chunk: Call[],\r\n  minBlockNumber: number\r\n): Promise<{ results: string[]; blockNumber: number }> {\r\n  let resultsBlockNumber\r\n  let returnData\r\n  try {\r\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\r\n      chunk.map((obj) => [obj.address, obj.callData])\r\n    )\r\n  } catch (error) {\r\n    console.info('Failed to fetch chunk inside retry', error)\r\n    throw error\r\n  }\r\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\r\n    throw new RetryableError('Fetched for old block number')\r\n  }\r\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\r\n}\r\n\r\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\r\nexport function activeListeningKeys(\r\n  allListeners: AppState['multicall']['callListeners'],\r\n  chainId?: number\r\n): { [callKey: string]: number } {\r\n  if (!allListeners || !chainId) return {}\r\n  const listeners = allListeners[chainId]\r\n  if (!listeners) return {}\r\n\r\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\r\n    const keyListeners = listeners[callKey]\r\n\r\n    memo[callKey] = Object.keys(keyListeners)\r\n      .filter((key) => {\r\n        const blocksPerFetch = parseInt(key)\r\n        if (blocksPerFetch <= 0) return false\r\n        return keyListeners[blocksPerFetch] > 0\r\n      })\r\n      .reduce((previousMin, current) => {\r\n        return Math.min(previousMin, parseInt(current))\r\n      }, Infinity)\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */\r\nexport function outdatedListeningKeys(\r\n  callResults: AppState['multicall']['callResults'],\r\n  listeningKeys: { [callKey: string]: number },\r\n  chainId: number | undefined,\r\n  latestBlockNumber: number | undefined\r\n): string[] {\r\n  if (!chainId || !latestBlockNumber) return []\r\n  const results = callResults[chainId]\r\n  // no results at all, load everything\r\n  if (!results) return Object.keys(listeningKeys)\r\n\r\n  return Object.keys(listeningKeys).filter((callKey) => {\r\n    const blocksPerFetch = listeningKeys[callKey]\r\n\r\n    const data = callResults[chainId][callKey]\r\n    // no data, must fetch\r\n    if (!data) return true\r\n\r\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\r\n\r\n    // already fetching it for a recent enough block, don't refetch it\r\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\r\n\r\n    // if data is older than minDataBlockNumber, fetch it\r\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\r\n  })\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\r\n  // wait for listeners to settle before triggering updates\r\n  const debouncedListeners = useDebounce(state.callListeners, 100)\r\n  const latestBlockNumber = useBlockNumber()\r\n  const { chainId } = useActiveWeb3React()\r\n  const multicallContract = useMulticallContract()\r\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\r\n\r\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\r\n    return activeListeningKeys(debouncedListeners, chainId)\r\n  }, [debouncedListeners, chainId])\r\n\r\n  const unserializedOutdatedCallKeys = useMemo(() => {\r\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\r\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\r\n\r\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [\r\n    unserializedOutdatedCallKeys,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    if (!latestBlockNumber || !chainId || !multicallContract) return\r\n\r\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\r\n    if (outdatedCallKeys.length === 0) return\r\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\r\n\r\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\r\n\r\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\r\n      cancellations.current?.cancellations?.forEach((c) => c())\r\n    }\r\n\r\n    dispatch(\r\n      fetchingMulticallResults({\r\n        calls,\r\n        chainId,\r\n        fetchingBlockNumber: latestBlockNumber,\r\n      })\r\n    )\r\n\r\n    cancellations.current = {\r\n      blockNumber: latestBlockNumber,\r\n      cancellations: chunkedCalls.map((chunk, index) => {\r\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\r\n          n: Infinity,\r\n          minWait: 2500,\r\n          maxWait: 3500,\r\n        })\r\n        promise\r\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\r\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber }\r\n\r\n            // accumulates the length of all previous indices\r\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\r\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\r\n\r\n            dispatch(\r\n              updateMulticallResults({\r\n                chainId,\r\n                results: outdatedCallKeys\r\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\r\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\r\n                    memo[callKey] = returnData[i] ?? null\r\n                    return memo\r\n                  }, {}),\r\n                blockNumber: fetchBlockNumber,\r\n              })\r\n            )\r\n          })\r\n          .catch((error: any) => {\r\n            if (error instanceof CancelledError) {\r\n              console.error('Cancelled fetch for blockNumber', latestBlockNumber)\r\n              return\r\n            }\r\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\r\n            dispatch(\r\n              errorFetchingMulticallResults({\r\n                calls: chunk,\r\n                chainId,\r\n                fetchingBlockNumber: latestBlockNumber,\r\n              })\r\n            )\r\n          })\r\n        return cancel\r\n      }),\r\n    }\r\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}