{"ast":null,"code":"import{TokenAmount}from'@pancakeswap-libs/sdk';import{useTokenContract}from'../hooks/useContract';import{useSingleCallResult}from'../state/multicall/hooks';// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nexport function useTotalSupply(token){var _useSingleCallResult,_useSingleCallResult$;var contract=useTokenContract(token===null||token===void 0?void 0:token.address,false);var totalSupply=(_useSingleCallResult=useSingleCallResult(contract,'totalSupply'))===null||_useSingleCallResult===void 0?void 0:(_useSingleCallResult$=_useSingleCallResult.result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];return token&&totalSupply?new TokenAmount(token,totalSupply.toString()):undefined;}export default useTotalSupply;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/data/TotalSupply.ts"],"names":["TokenAmount","useTokenContract","useSingleCallResult","useTotalSupply","token","contract","address","totalSupply","result","toString","undefined"],"mappings":"AACA,OAAgBA,WAAhB,KAAmC,uBAAnC,CACA,OAASC,gBAAT,KAAiC,sBAAjC,CACA,OAASC,mBAAT,KAAoC,0BAApC,CAEA;AACA;AACA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAAgE,gDACrE,GAAMC,CAAAA,QAAQ,CAAGJ,gBAAgB,CAACG,KAAD,SAACA,KAAD,iBAACA,KAAK,CAAEE,OAAR,CAAiB,KAAjB,CAAjC,CAEA,GAAMC,CAAAA,WAAsB,uBAAGL,mBAAmB,CAACG,QAAD,CAAW,aAAX,CAAtB,sEAAG,qBAA8CG,MAAjD,gDAAG,sBAAuD,CAAvD,CAA/B,CAEA,MAAOJ,CAAAA,KAAK,EAAIG,WAAT,CAAuB,GAAIP,CAAAA,WAAJ,CAAgBI,KAAhB,CAAuBG,WAAW,CAACE,QAAZ,EAAvB,CAAvB,CAAwEC,SAA/E,CACD,CAED,cAAeP,CAAAA,cAAf","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Token, TokenAmount } from '@pancakeswap-libs/sdk'\r\nimport { useTokenContract } from '../hooks/useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\n// returns undefined if input token is undefined, or fails to get token contract,\r\n// or contract total supply cannot be fetched\r\nexport function useTotalSupply(token?: Token): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\r\n\r\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\r\n}\r\n\r\nexport default useTotalSupply\r\n"]},"metadata":{},"sourceType":"module"}