{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mh = require('multihashes');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar _require = require('multicodec/src/base-table.js'),\n    codecs = _require.baseTable;\n\nvar CIDUtil = require('./cid-util');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar uint8ArrayEquals = require('uint8arrays/equals');\n\nvar codecInts =\n/** @type {CodecName[]} */\nObject.keys(codecs).reduce(function (p, name) {\n  p[codecs[name]] = name;\n  return p;\n},\n/** @type {Record<CodecNumber, CodecName>} */\n{});\nvar symbol = Symbol.for('@ipld/js-cid/CID');\n/**\r\n * @typedef {Object} SerializedCID\r\n * @property {string} codec\r\n * @property {number} version\r\n * @property {Uint8Array} hash\r\n */\n\n/**\r\n * @typedef {0|1} CIDVersion\r\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\r\n * @typedef {import('multicodec').CodecName} CodecName\r\n * @typedef {import('multicodec').CodecNumber} CodecNumber\r\n */\n\n/**\r\n * Class representing a CID `<mbase><version><mcodec><mhash>`\r\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\r\n *\r\n * @class CID\r\n */\n\nvar CID = /*#__PURE__*/function () {\n  /**\r\n   * Create a new CID.\r\n   *\r\n   * The algorithm for argument input is roughly:\r\n   * ```\r\n   * if (cid)\r\n   *   -> create a copy\r\n   * else if (str)\r\n   *   if (1st char is on multibase table) -> CID String\r\n   *   else -> bs58 encoded multihash\r\n   * else if (Uint8Array)\r\n   *   if (1st byte is 0 or 1) -> CID\r\n   *   else -> multihash\r\n   * else if (Number)\r\n   *   -> construct CID by parts\r\n   * ```\r\n   *\r\n   * @param {CIDVersion | string | Uint8Array | CID} version\r\n   * @param {string|number} [codec]\r\n   * @param {Uint8Array} [multihash]\r\n   * @param {string} [multibaseName]\r\n   *\r\n   * @example\r\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\r\n   * new CID(<cidStr>)\r\n   * new CID(<cid.bytes>)\r\n   * new CID(<multihash>)\r\n   * new CID(<bs58 encoded multihash>)\r\n   * new CID(<cid>)\r\n   */\n  function CID(version, codec, multihash, multibaseName) {\n    _classCallCheck(this, CID);\n\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\r\n     * The version of the CID.\r\n     *\r\n     * @type {CIDVersion}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version;\n    /**\r\n     * The codec of the CID.\r\n     *\r\n     * @deprecated\r\n     * @type {CodecName}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.codec;\n    /**\r\n     * The multihash of the CID.\r\n     *\r\n     * @type {Uint8Array}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.multihash;\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      var cid =\n      /** @type {CID} */\n      version;\n      this.version = cid.version;\n      this.codec = cid.codec;\n      this.multihash = cid.multihash; // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');\n      return;\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      var baseName = multibase.isEncoded(version);\n\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        var _cid = multibase.decode(version);\n\n        this.version =\n        /** @type {CIDVersion} */\n        parseInt(_cid[0].toString(), 16);\n        this.codec = multicodec.getCodec(_cid.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid.slice(1));\n        this.multibaseName = baseName;\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      Object.defineProperty(this, 'string', {\n        value: version\n      });\n      return;\n    }\n\n    if (version instanceof Uint8Array) {\n      var v = parseInt(version[0].toString(), 16);\n\n      if (v === 1) {\n        // version is a CID Uint8Array\n        var _cid2 = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(_cid2.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid2.slice(1));\n        this.multibaseName = 'base32';\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      return;\n    } // otherwise, assemble the CID from the parameters\n\n\n    this.version = version;\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec];\n    }\n\n    this.codec =\n    /** @type {CodecName} */\n    codec;\n    this.multihash =\n    /** @type {Uint8Array} */\n    multihash;\n    /**\r\n     * Multibase name as string.\r\n     *\r\n     * @deprecated\r\n     * @type {string}\r\n     */\n\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');\n    CID.validateCID(this);\n  }\n  /**\r\n   * The CID as a `Uint8Array`\r\n   *\r\n   * @returns {Uint8Array}\r\n   *\r\n   */\n\n\n  _createClass(CID, [{\n    key: \"toV0\",\n\n    /**\r\n     * Convert to a CID of version `0`.\r\n     *\r\n     * @returns {CID}\r\n     */\n    value: function toV0() {\n      if (this.codec !== 'dag-pb') {\n        throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n      }\n\n      var _mh$decode = mh.decode(this.multihash),\n          name = _mh$decode.name,\n          length = _mh$decode.length;\n\n      if (name !== 'sha2-256') {\n        throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n      }\n\n      if (length !== 32) {\n        throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');\n      }\n\n      return new CID(0, this.codec, this.multihash);\n    }\n    /**\r\n     * Convert to a CID of version `1`.\r\n     *\r\n     * @returns {CID}\r\n     */\n\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      return new CID(1, this.codec, this.multihash);\n    }\n    /**\r\n     * Encode the CID into a string.\r\n     *\r\n     * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"toBaseEncodedString\",\n    value: function toBaseEncodedString() {\n      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.multibaseName;\n\n      // @ts-ignore non enumerable cache property\n      if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n        // @ts-ignore non enumerable cache property\n        return this.string;\n      }\n\n      var str;\n\n      if (this.version === 0) {\n        if (base !== 'base58btc') {\n          throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');\n        }\n\n        str = mh.toB58String(this.multihash);\n      } else if (this.version === 1) {\n        str = uint8ArrayToString(multibase.encode(base, this.bytes));\n      } else {\n        throw new Error('unsupported version');\n      }\n\n      if (base === this.multibaseName) {\n        // cache the string value\n        Object.defineProperty(this, 'string', {\n          value: str\n        });\n      }\n\n      return str;\n    }\n    /**\r\n     * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: Symbol.for('nodejs.util.inspect.custom'),\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n    /**\r\n     * Encode the CID into a string.\r\n     *\r\n     * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      return this.toBaseEncodedString(base);\n    }\n    /**\r\n     * Serialize to a plain object.\r\n     *\r\n     * @returns {SerializedCID}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        codec: this.codec,\n        version: this.version,\n        hash: this.multihash\n      };\n    }\n    /**\r\n     * Compare equality with another CID.\r\n     *\r\n     * @param {CID} other\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.codec === other.codec && this.version === other.version && uint8ArrayEquals(this.multihash, other.multihash);\n    }\n    /**\r\n     * Test if the given input is a valid CID object.\r\n     * Throws if it is not.\r\n     *\r\n     * @param {any} other - The other CID.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      // @ts-ignore\n      var bytes = this._bytes;\n\n      if (!bytes) {\n        if (this.version === 0) {\n          bytes = this.multihash;\n        } else if (this.version === 1) {\n          var codec = multicodec.getCodeVarint(this.codec);\n          bytes = uint8ArrayConcat([[1], codec, this.multihash], 1 + codec.byteLength + this.multihash.byteLength);\n        } else {\n          throw new Error('unsupported version');\n        } // Cache this Uint8Array so it doesn't have to be recreated\n\n\n        Object.defineProperty(this, '_bytes', {\n          value: bytes\n        });\n      }\n\n      return bytes;\n    }\n    /**\r\n     * The prefix of the CID.\r\n     *\r\n     * @returns {Uint8Array}\r\n     */\n\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      var codec = multicodec.getCodeVarint(this.codec);\n      var multihash = mh.prefix(this.multihash);\n      var prefix = uint8ArrayConcat([[this.version], codec, multihash], 1 + codec.byteLength + multihash.byteLength);\n      return prefix;\n    }\n    /**\r\n     * The codec of the CID in its number form.\r\n     *\r\n     * @returns {CodecNumber}\r\n     */\n\n  }, {\n    key: \"code\",\n    get: function get() {\n      return codecs[this.codec];\n    }\n  }], [{\n    key: \"validateCID\",\n    value: function validateCID(other) {\n      var errorMsg = CIDUtil.checkCIDComponents(other);\n\n      if (errorMsg) {\n        throw new Error(errorMsg);\n      }\n    }\n    /**\r\n     * Check if object is a CID instance\r\n     *\r\n     * @param {any} value\r\n     * @returns {value is CID}\r\n     */\n\n  }, {\n    key: \"isCID\",\n    value: function isCID(value) {\n      return value instanceof CID || Boolean(value && value[symbol]);\n    }\n  }]);\n\n  return CID;\n}();\n\nCID.codecs = codecs;\nmodule.exports = CID;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/cids/src/index.js"],"names":["mh","require","multibase","multicodec","codecs","baseTable","CIDUtil","uint8ArrayConcat","uint8ArrayToString","uint8ArrayEquals","codecInts","Object","keys","reduce","p","name","symbol","Symbol","for","CID","version","codec","multihash","multibaseName","defineProperty","value","isCID","cid","baseName","isEncoded","decode","parseInt","toString","getCodec","slice","rmPrefix","fromB58String","validateCID","Uint8Array","v","Error","length","base","string","str","toB58String","encode","bytes","toBaseEncodedString","hash","other","_bytes","getCodeVarint","byteLength","prefix","errorMsg","checkCIDComponents","Boolean","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst mh = require('multihashes')\r\nconst multibase = require('multibase')\r\nconst multicodec = require('multicodec')\r\nconst { baseTable: codecs } = require('multicodec/src/base-table.js')\r\nconst CIDUtil = require('./cid-util')\r\nconst uint8ArrayConcat = require('uint8arrays/concat')\r\nconst uint8ArrayToString = require('uint8arrays/to-string')\r\nconst uint8ArrayEquals = require('uint8arrays/equals')\r\n\r\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\r\n  p[codecs[name]] = name\r\n  return p\r\n}, /** @type {Record<CodecNumber, CodecName>} */({}))\r\n\r\nconst symbol = Symbol.for('@ipld/js-cid/CID')\r\n\r\n/**\r\n * @typedef {Object} SerializedCID\r\n * @property {string} codec\r\n * @property {number} version\r\n * @property {Uint8Array} hash\r\n */\r\n/**\r\n * @typedef {0|1} CIDVersion\r\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\r\n * @typedef {import('multicodec').CodecName} CodecName\r\n * @typedef {import('multicodec').CodecNumber} CodecNumber\r\n */\r\n\r\n/**\r\n * Class representing a CID `<mbase><version><mcodec><mhash>`\r\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\r\n *\r\n * @class CID\r\n */\r\nclass CID {\r\n  /**\r\n   * Create a new CID.\r\n   *\r\n   * The algorithm for argument input is roughly:\r\n   * ```\r\n   * if (cid)\r\n   *   -> create a copy\r\n   * else if (str)\r\n   *   if (1st char is on multibase table) -> CID String\r\n   *   else -> bs58 encoded multihash\r\n   * else if (Uint8Array)\r\n   *   if (1st byte is 0 or 1) -> CID\r\n   *   else -> multihash\r\n   * else if (Number)\r\n   *   -> construct CID by parts\r\n   * ```\r\n   *\r\n   * @param {CIDVersion | string | Uint8Array | CID} version\r\n   * @param {string|number} [codec]\r\n   * @param {Uint8Array} [multihash]\r\n   * @param {string} [multibaseName]\r\n   *\r\n   * @example\r\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\r\n   * new CID(<cidStr>)\r\n   * new CID(<cid.bytes>)\r\n   * new CID(<multihash>)\r\n   * new CID(<bs58 encoded multihash>)\r\n   * new CID(<cid>)\r\n   */\r\n  constructor (version, codec, multihash, multibaseName) {\r\n    // We have below three blank field accessors only because\r\n    // otherwise TS will not pick them up if done after assignemnts\r\n\r\n    /**\r\n     * The version of the CID.\r\n     *\r\n     * @type {CIDVersion}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.version\r\n\r\n    /**\r\n     * The codec of the CID.\r\n     *\r\n     * @deprecated\r\n     * @type {CodecName}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.codec\r\n\r\n    /**\r\n     * The multihash of the CID.\r\n     *\r\n     * @type {Uint8Array}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.multihash\r\n\r\n    Object.defineProperty(this, symbol, { value: true })\r\n    if (CID.isCID(version)) {\r\n      // version is an exising CID instance\r\n      const cid = /** @type {CID} */(version)\r\n      this.version = cid.version\r\n      this.codec = cid.codec\r\n      this.multihash = cid.multihash\r\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\r\n      // @ts-ignore\r\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\r\n      return\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      // e.g. 'base32' or false\r\n      const baseName = multibase.isEncoded(version)\r\n      if (baseName) {\r\n        // version is a CID String encoded with multibase, so v1\r\n        const cid = multibase.decode(version)\r\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\r\n        this.codec = multicodec.getCodec(cid.slice(1))\r\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\r\n        this.multibaseName = baseName\r\n      } else {\r\n        // version is a base58btc string multihash, so v0\r\n        this.version = 0\r\n        this.codec = 'dag-pb'\r\n        this.multihash = mh.fromB58String(version)\r\n        this.multibaseName = 'base58btc'\r\n      }\r\n      CID.validateCID(this)\r\n      Object.defineProperty(this, 'string', { value: version })\r\n      return\r\n    }\r\n\r\n    if (version instanceof Uint8Array) {\r\n      const v = parseInt(version[0].toString(), 16)\r\n      if (v === 1) {\r\n        // version is a CID Uint8Array\r\n        const cid = version\r\n        this.version = v\r\n        this.codec = multicodec.getCodec(cid.slice(1))\r\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\r\n        this.multibaseName = 'base32'\r\n      } else {\r\n        // version is a raw multihash Uint8Array, so v0\r\n        this.version = 0\r\n        this.codec = 'dag-pb'\r\n        this.multihash = version\r\n        this.multibaseName = 'base58btc'\r\n      }\r\n      CID.validateCID(this)\r\n      return\r\n    }\r\n\r\n    // otherwise, assemble the CID from the parameters\r\n\r\n    this.version = version\r\n\r\n    if (typeof codec === 'number') {\r\n      // @ts-ignore\r\n      codec = codecInts[codec]\r\n    }\r\n\r\n    this.codec = /** @type {CodecName} */ (codec)\r\n\r\n    this.multihash = /** @type {Uint8Array} */ (multihash)\r\n\r\n    /**\r\n     * Multibase name as string.\r\n     *\r\n     * @deprecated\r\n     * @type {string}\r\n     */\r\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\r\n\r\n    CID.validateCID(this)\r\n  }\r\n\r\n  /**\r\n   * The CID as a `Uint8Array`\r\n   *\r\n   * @returns {Uint8Array}\r\n   *\r\n   */\r\n  get bytes () {\r\n    // @ts-ignore\r\n    let bytes = this._bytes\r\n\r\n    if (!bytes) {\r\n      if (this.version === 0) {\r\n        bytes = this.multihash\r\n      } else if (this.version === 1) {\r\n        const codec = multicodec.getCodeVarint(this.codec)\r\n        bytes = uint8ArrayConcat([\r\n          [1], codec, this.multihash\r\n        ], 1 + codec.byteLength + this.multihash.byteLength)\r\n      } else {\r\n        throw new Error('unsupported version')\r\n      }\r\n\r\n      // Cache this Uint8Array so it doesn't have to be recreated\r\n      Object.defineProperty(this, '_bytes', { value: bytes })\r\n    }\r\n\r\n    return bytes\r\n  }\r\n\r\n  /**\r\n   * The prefix of the CID.\r\n   *\r\n   * @returns {Uint8Array}\r\n   */\r\n  get prefix () {\r\n    const codec = multicodec.getCodeVarint(this.codec)\r\n    const multihash = mh.prefix(this.multihash)\r\n    const prefix = uint8ArrayConcat([\r\n      [this.version], codec, multihash\r\n    ], 1 + codec.byteLength + multihash.byteLength)\r\n\r\n    return prefix\r\n  }\r\n\r\n  /**\r\n   * The codec of the CID in its number form.\r\n   *\r\n   * @returns {CodecNumber}\r\n   */\r\n  get code () {\r\n    return codecs[this.codec]\r\n  }\r\n\r\n  /**\r\n   * Convert to a CID of version `0`.\r\n   *\r\n   * @returns {CID}\r\n   */\r\n  toV0 () {\r\n    if (this.codec !== 'dag-pb') {\r\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\r\n    }\r\n\r\n    const { name, length } = mh.decode(this.multihash)\r\n\r\n    if (name !== 'sha2-256') {\r\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\r\n    }\r\n\r\n    if (length !== 32) {\r\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\r\n    }\r\n\r\n    return new CID(0, this.codec, this.multihash)\r\n  }\r\n\r\n  /**\r\n   * Convert to a CID of version `1`.\r\n   *\r\n   * @returns {CID}\r\n   */\r\n  toV1 () {\r\n    return new CID(1, this.codec, this.multihash)\r\n  }\r\n\r\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\r\n  toBaseEncodedString (base = this.multibaseName) {\r\n    // @ts-ignore non enumerable cache property\r\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\r\n      // @ts-ignore non enumerable cache property\r\n      return this.string\r\n    }\r\n    let str\r\n    if (this.version === 0) {\r\n      if (base !== 'base58btc') {\r\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\r\n      }\r\n      str = mh.toB58String(this.multihash)\r\n    } else if (this.version === 1) {\r\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\r\n    } else {\r\n      throw new Error('unsupported version')\r\n    }\r\n    if (base === this.multibaseName) {\r\n      // cache the string value\r\n      Object.defineProperty(this, 'string', { value: str })\r\n    }\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\r\n   *\r\n   * @returns {string}\r\n   */\r\n  [Symbol.for('nodejs.util.inspect.custom')] () {\r\n    return 'CID(' + this.toString() + ')'\r\n  }\r\n\r\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\r\n  toString (base) {\r\n    return this.toBaseEncodedString(base)\r\n  }\r\n\r\n  /**\r\n   * Serialize to a plain object.\r\n   *\r\n   * @returns {SerializedCID}\r\n   */\r\n  toJSON () {\r\n    return {\r\n      codec: this.codec,\r\n      version: this.version,\r\n      hash: this.multihash\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compare equality with another CID.\r\n   *\r\n   * @param {CID} other\r\n   * @returns {boolean}\r\n   */\r\n  equals (other) {\r\n    return this.codec === other.codec &&\r\n      this.version === other.version &&\r\n      uint8ArrayEquals(this.multihash, other.multihash)\r\n  }\r\n\r\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Throws if it is not.\r\n   *\r\n   * @param {any} other - The other CID.\r\n   * @returns {void}\r\n   */\r\n  static validateCID (other) {\r\n    const errorMsg = CIDUtil.checkCIDComponents(other)\r\n    if (errorMsg) {\r\n      throw new Error(errorMsg)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if object is a CID instance\r\n   *\r\n   * @param {any} value\r\n   * @returns {value is CID}\r\n   */\r\n  static isCID (value) {\r\n    return value instanceof CID || Boolean(value && value[symbol])\r\n  }\r\n}\r\n\r\nCID.codecs = codecs\r\n\r\nmodule.exports = CID\r\n"]},"metadata":{},"sourceType":"script"}