{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst {\n  baseTable: codecs\n} = require('multicodec/src/base-table.js');\n\nconst CIDUtil = require('./cid-util');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n\nconst codecInts =\n/** @type {CodecName[]} */\nObject.keys(codecs).reduce((p, name) => {\n  p[codecs[name]] = name;\n  return p;\n},\n/** @type {Record<CodecNumber, CodecName>} */\n{});\nconst symbol = Symbol.for('@ipld/js-cid/CID');\n/**\r\n * @typedef {Object} SerializedCID\r\n * @property {string} codec\r\n * @property {number} version\r\n * @property {Uint8Array} hash\r\n */\n\n/**\r\n * @typedef {0|1} CIDVersion\r\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\r\n * @typedef {import('multicodec').CodecName} CodecName\r\n * @typedef {import('multicodec').CodecNumber} CodecNumber\r\n */\n\n/**\r\n * Class representing a CID `<mbase><version><mcodec><mhash>`\r\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\r\n *\r\n * @class CID\r\n */\n\nclass CID {\n  /**\r\n   * Create a new CID.\r\n   *\r\n   * The algorithm for argument input is roughly:\r\n   * ```\r\n   * if (cid)\r\n   *   -> create a copy\r\n   * else if (str)\r\n   *   if (1st char is on multibase table) -> CID String\r\n   *   else -> bs58 encoded multihash\r\n   * else if (Uint8Array)\r\n   *   if (1st byte is 0 or 1) -> CID\r\n   *   else -> multihash\r\n   * else if (Number)\r\n   *   -> construct CID by parts\r\n   * ```\r\n   *\r\n   * @param {CIDVersion | string | Uint8Array | CID} version\r\n   * @param {string|number} [codec]\r\n   * @param {Uint8Array} [multihash]\r\n   * @param {string} [multibaseName]\r\n   *\r\n   * @example\r\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\r\n   * new CID(<cidStr>)\r\n   * new CID(<cid.bytes>)\r\n   * new CID(<multihash>)\r\n   * new CID(<bs58 encoded multihash>)\r\n   * new CID(<cid>)\r\n   */\n  constructor(version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\r\n     * The version of the CID.\r\n     *\r\n     * @type {CIDVersion}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version;\n    /**\r\n     * The codec of the CID.\r\n     *\r\n     * @deprecated\r\n     * @type {CodecName}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.codec;\n    /**\r\n     * The multihash of the CID.\r\n     *\r\n     * @type {Uint8Array}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.multihash;\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid =\n      /** @type {CID} */\n      version;\n      this.version = cid.version;\n      this.codec = cid.codec;\n      this.multihash = cid.multihash; // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');\n      return;\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version);\n\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version);\n        this.version =\n        /** @type {CIDVersion} */\n        parseInt(cid[0].toString(), 16);\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n        this.multibaseName = baseName;\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      Object.defineProperty(this, 'string', {\n        value: version\n      });\n      return;\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16);\n\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n        this.multibaseName = 'base32';\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      return;\n    } // otherwise, assemble the CID from the parameters\n\n\n    this.version = version;\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec];\n    }\n\n    this.codec =\n    /** @type {CodecName} */\n    codec;\n    this.multihash =\n    /** @type {Uint8Array} */\n    multihash;\n    /**\r\n     * Multibase name as string.\r\n     *\r\n     * @deprecated\r\n     * @type {string}\r\n     */\n\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');\n    CID.validateCID(this);\n  }\n  /**\r\n   * The CID as a `Uint8Array`\r\n   *\r\n   * @returns {Uint8Array}\r\n   *\r\n   */\n\n\n  get bytes() {\n    // @ts-ignore\n    let bytes = this._bytes;\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash;\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec);\n        bytes = uint8ArrayConcat([[1], codec, this.multihash], 1 + codec.byteLength + this.multihash.byteLength);\n      } else {\n        throw new Error('unsupported version');\n      } // Cache this Uint8Array so it doesn't have to be recreated\n\n\n      Object.defineProperty(this, '_bytes', {\n        value: bytes\n      });\n    }\n\n    return bytes;\n  }\n  /**\r\n   * The prefix of the CID.\r\n   *\r\n   * @returns {Uint8Array}\r\n   */\n\n\n  get prefix() {\n    const codec = multicodec.getCodeVarint(this.codec);\n    const multihash = mh.prefix(this.multihash);\n    const prefix = uint8ArrayConcat([[this.version], codec, multihash], 1 + codec.byteLength + multihash.byteLength);\n    return prefix;\n  }\n  /**\r\n   * The codec of the CID in its number form.\r\n   *\r\n   * @returns {CodecNumber}\r\n   */\n\n\n  get code() {\n    return codecs[this.codec];\n  }\n  /**\r\n   * Convert to a CID of version `0`.\r\n   *\r\n   * @returns {CID}\r\n   */\n\n\n  toV0() {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n    }\n\n    const {\n      name,\n      length\n    } = mh.decode(this.multihash);\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');\n    }\n\n    return new CID(0, this.codec, this.multihash);\n  }\n  /**\r\n   * Convert to a CID of version `1`.\r\n   *\r\n   * @returns {CID}\r\n   */\n\n\n  toV1() {\n    return new CID(1, this.codec, this.multihash);\n  }\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\n\n\n  toBaseEncodedString(base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string;\n    }\n\n    let str;\n\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');\n      }\n\n      str = mh.toB58String(this.multihash);\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes));\n    } else {\n      throw new Error('unsupported version');\n    }\n\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', {\n        value: str\n      });\n    }\n\n    return str;\n  }\n  /**\r\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\r\n   *\r\n   * @returns {string}\r\n   */\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\n\n\n  toString(base) {\n    return this.toBaseEncodedString(base);\n  }\n  /**\r\n   * Serialize to a plain object.\r\n   *\r\n   * @returns {SerializedCID}\r\n   */\n\n\n  toJSON() {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    };\n  }\n  /**\r\n   * Compare equality with another CID.\r\n   *\r\n   * @param {CID} other\r\n   * @returns {boolean}\r\n   */\n\n\n  equals(other) {\n    return this.codec === other.codec && this.version === other.version && uint8ArrayEquals(this.multihash, other.multihash);\n  }\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Throws if it is not.\r\n   *\r\n   * @param {any} other - The other CID.\r\n   * @returns {void}\r\n   */\n\n\n  static validateCID(other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other);\n\n    if (errorMsg) {\n      throw new Error(errorMsg);\n    }\n  }\n  /**\r\n   * Check if object is a CID instance\r\n   *\r\n   * @param {any} value\r\n   * @returns {value is CID}\r\n   */\n\n\n  static isCID(value) {\n    return value instanceof CID || Boolean(value && value[symbol]);\n  }\n\n}\n\nCID.codecs = codecs;\nmodule.exports = CID;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/cids/src/index.js"],"names":["mh","require","multibase","multicodec","baseTable","codecs","CIDUtil","uint8ArrayConcat","uint8ArrayToString","uint8ArrayEquals","codecInts","Object","keys","reduce","p","name","symbol","Symbol","for","CID","constructor","version","codec","multihash","multibaseName","defineProperty","value","isCID","cid","baseName","isEncoded","decode","parseInt","toString","getCodec","slice","rmPrefix","fromB58String","validateCID","Uint8Array","v","bytes","_bytes","getCodeVarint","byteLength","Error","prefix","code","toV0","length","toV1","toBaseEncodedString","base","string","str","toB58String","encode","toJSON","hash","equals","other","errorMsg","checkCIDComponents","Boolean","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst mh = require('multihashes')\r\nconst multibase = require('multibase')\r\nconst multicodec = require('multicodec')\r\nconst { baseTable: codecs } = require('multicodec/src/base-table.js')\r\nconst CIDUtil = require('./cid-util')\r\nconst uint8ArrayConcat = require('uint8arrays/concat')\r\nconst uint8ArrayToString = require('uint8arrays/to-string')\r\nconst uint8ArrayEquals = require('uint8arrays/equals')\r\n\r\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\r\n  p[codecs[name]] = name\r\n  return p\r\n}, /** @type {Record<CodecNumber, CodecName>} */({}))\r\n\r\nconst symbol = Symbol.for('@ipld/js-cid/CID')\r\n\r\n/**\r\n * @typedef {Object} SerializedCID\r\n * @property {string} codec\r\n * @property {number} version\r\n * @property {Uint8Array} hash\r\n */\r\n/**\r\n * @typedef {0|1} CIDVersion\r\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\r\n * @typedef {import('multicodec').CodecName} CodecName\r\n * @typedef {import('multicodec').CodecNumber} CodecNumber\r\n */\r\n\r\n/**\r\n * Class representing a CID `<mbase><version><mcodec><mhash>`\r\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\r\n *\r\n * @class CID\r\n */\r\nclass CID {\r\n  /**\r\n   * Create a new CID.\r\n   *\r\n   * The algorithm for argument input is roughly:\r\n   * ```\r\n   * if (cid)\r\n   *   -> create a copy\r\n   * else if (str)\r\n   *   if (1st char is on multibase table) -> CID String\r\n   *   else -> bs58 encoded multihash\r\n   * else if (Uint8Array)\r\n   *   if (1st byte is 0 or 1) -> CID\r\n   *   else -> multihash\r\n   * else if (Number)\r\n   *   -> construct CID by parts\r\n   * ```\r\n   *\r\n   * @param {CIDVersion | string | Uint8Array | CID} version\r\n   * @param {string|number} [codec]\r\n   * @param {Uint8Array} [multihash]\r\n   * @param {string} [multibaseName]\r\n   *\r\n   * @example\r\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\r\n   * new CID(<cidStr>)\r\n   * new CID(<cid.bytes>)\r\n   * new CID(<multihash>)\r\n   * new CID(<bs58 encoded multihash>)\r\n   * new CID(<cid>)\r\n   */\r\n  constructor (version, codec, multihash, multibaseName) {\r\n    // We have below three blank field accessors only because\r\n    // otherwise TS will not pick them up if done after assignemnts\r\n\r\n    /**\r\n     * The version of the CID.\r\n     *\r\n     * @type {CIDVersion}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.version\r\n\r\n    /**\r\n     * The codec of the CID.\r\n     *\r\n     * @deprecated\r\n     * @type {CodecName}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.codec\r\n\r\n    /**\r\n     * The multihash of the CID.\r\n     *\r\n     * @type {Uint8Array}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.multihash\r\n\r\n    Object.defineProperty(this, symbol, { value: true })\r\n    if (CID.isCID(version)) {\r\n      // version is an exising CID instance\r\n      const cid = /** @type {CID} */(version)\r\n      this.version = cid.version\r\n      this.codec = cid.codec\r\n      this.multihash = cid.multihash\r\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\r\n      // @ts-ignore\r\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\r\n      return\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      // e.g. 'base32' or false\r\n      const baseName = multibase.isEncoded(version)\r\n      if (baseName) {\r\n        // version is a CID String encoded with multibase, so v1\r\n        const cid = multibase.decode(version)\r\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\r\n        this.codec = multicodec.getCodec(cid.slice(1))\r\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\r\n        this.multibaseName = baseName\r\n      } else {\r\n        // version is a base58btc string multihash, so v0\r\n        this.version = 0\r\n        this.codec = 'dag-pb'\r\n        this.multihash = mh.fromB58String(version)\r\n        this.multibaseName = 'base58btc'\r\n      }\r\n      CID.validateCID(this)\r\n      Object.defineProperty(this, 'string', { value: version })\r\n      return\r\n    }\r\n\r\n    if (version instanceof Uint8Array) {\r\n      const v = parseInt(version[0].toString(), 16)\r\n      if (v === 1) {\r\n        // version is a CID Uint8Array\r\n        const cid = version\r\n        this.version = v\r\n        this.codec = multicodec.getCodec(cid.slice(1))\r\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\r\n        this.multibaseName = 'base32'\r\n      } else {\r\n        // version is a raw multihash Uint8Array, so v0\r\n        this.version = 0\r\n        this.codec = 'dag-pb'\r\n        this.multihash = version\r\n        this.multibaseName = 'base58btc'\r\n      }\r\n      CID.validateCID(this)\r\n      return\r\n    }\r\n\r\n    // otherwise, assemble the CID from the parameters\r\n\r\n    this.version = version\r\n\r\n    if (typeof codec === 'number') {\r\n      // @ts-ignore\r\n      codec = codecInts[codec]\r\n    }\r\n\r\n    this.codec = /** @type {CodecName} */ (codec)\r\n\r\n    this.multihash = /** @type {Uint8Array} */ (multihash)\r\n\r\n    /**\r\n     * Multibase name as string.\r\n     *\r\n     * @deprecated\r\n     * @type {string}\r\n     */\r\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\r\n\r\n    CID.validateCID(this)\r\n  }\r\n\r\n  /**\r\n   * The CID as a `Uint8Array`\r\n   *\r\n   * @returns {Uint8Array}\r\n   *\r\n   */\r\n  get bytes () {\r\n    // @ts-ignore\r\n    let bytes = this._bytes\r\n\r\n    if (!bytes) {\r\n      if (this.version === 0) {\r\n        bytes = this.multihash\r\n      } else if (this.version === 1) {\r\n        const codec = multicodec.getCodeVarint(this.codec)\r\n        bytes = uint8ArrayConcat([\r\n          [1], codec, this.multihash\r\n        ], 1 + codec.byteLength + this.multihash.byteLength)\r\n      } else {\r\n        throw new Error('unsupported version')\r\n      }\r\n\r\n      // Cache this Uint8Array so it doesn't have to be recreated\r\n      Object.defineProperty(this, '_bytes', { value: bytes })\r\n    }\r\n\r\n    return bytes\r\n  }\r\n\r\n  /**\r\n   * The prefix of the CID.\r\n   *\r\n   * @returns {Uint8Array}\r\n   */\r\n  get prefix () {\r\n    const codec = multicodec.getCodeVarint(this.codec)\r\n    const multihash = mh.prefix(this.multihash)\r\n    const prefix = uint8ArrayConcat([\r\n      [this.version], codec, multihash\r\n    ], 1 + codec.byteLength + multihash.byteLength)\r\n\r\n    return prefix\r\n  }\r\n\r\n  /**\r\n   * The codec of the CID in its number form.\r\n   *\r\n   * @returns {CodecNumber}\r\n   */\r\n  get code () {\r\n    return codecs[this.codec]\r\n  }\r\n\r\n  /**\r\n   * Convert to a CID of version `0`.\r\n   *\r\n   * @returns {CID}\r\n   */\r\n  toV0 () {\r\n    if (this.codec !== 'dag-pb') {\r\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\r\n    }\r\n\r\n    const { name, length } = mh.decode(this.multihash)\r\n\r\n    if (name !== 'sha2-256') {\r\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\r\n    }\r\n\r\n    if (length !== 32) {\r\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\r\n    }\r\n\r\n    return new CID(0, this.codec, this.multihash)\r\n  }\r\n\r\n  /**\r\n   * Convert to a CID of version `1`.\r\n   *\r\n   * @returns {CID}\r\n   */\r\n  toV1 () {\r\n    return new CID(1, this.codec, this.multihash)\r\n  }\r\n\r\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\r\n  toBaseEncodedString (base = this.multibaseName) {\r\n    // @ts-ignore non enumerable cache property\r\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\r\n      // @ts-ignore non enumerable cache property\r\n      return this.string\r\n    }\r\n    let str\r\n    if (this.version === 0) {\r\n      if (base !== 'base58btc') {\r\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\r\n      }\r\n      str = mh.toB58String(this.multihash)\r\n    } else if (this.version === 1) {\r\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\r\n    } else {\r\n      throw new Error('unsupported version')\r\n    }\r\n    if (base === this.multibaseName) {\r\n      // cache the string value\r\n      Object.defineProperty(this, 'string', { value: str })\r\n    }\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\r\n   *\r\n   * @returns {string}\r\n   */\r\n  [Symbol.for('nodejs.util.inspect.custom')] () {\r\n    return 'CID(' + this.toString() + ')'\r\n  }\r\n\r\n  /**\r\n   * Encode the CID into a string.\r\n   *\r\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\r\n   * @returns {string}\r\n   */\r\n  toString (base) {\r\n    return this.toBaseEncodedString(base)\r\n  }\r\n\r\n  /**\r\n   * Serialize to a plain object.\r\n   *\r\n   * @returns {SerializedCID}\r\n   */\r\n  toJSON () {\r\n    return {\r\n      codec: this.codec,\r\n      version: this.version,\r\n      hash: this.multihash\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compare equality with another CID.\r\n   *\r\n   * @param {CID} other\r\n   * @returns {boolean}\r\n   */\r\n  equals (other) {\r\n    return this.codec === other.codec &&\r\n      this.version === other.version &&\r\n      uint8ArrayEquals(this.multihash, other.multihash)\r\n  }\r\n\r\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Throws if it is not.\r\n   *\r\n   * @param {any} other - The other CID.\r\n   * @returns {void}\r\n   */\r\n  static validateCID (other) {\r\n    const errorMsg = CIDUtil.checkCIDComponents(other)\r\n    if (errorMsg) {\r\n      throw new Error(errorMsg)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if object is a CID instance\r\n   *\r\n   * @param {any} value\r\n   * @returns {value is CID}\r\n   */\r\n  static isCID (value) {\r\n    return value instanceof CID || Boolean(value && value[symbol])\r\n  }\r\n}\r\n\r\nCID.codecs = codecs\r\n\r\nmodule.exports = CID\r\n"]},"metadata":{},"sourceType":"script"}