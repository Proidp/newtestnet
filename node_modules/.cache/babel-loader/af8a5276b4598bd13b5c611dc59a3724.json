{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _classCallCheck = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar ConnectionState;\n\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\r\n * Rx-ified WebSocket\r\n */\n\n\nvar RxWebSocket = /*#__PURE__*/function () {\n  /**\r\n   * Constructor\r\n   * @param url WebSocket server URL\r\n   * @param [WebSocketClass] Custom WebSocket implementation\r\n   */\n  function RxWebSocket(url) {\n    var WebSocketClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebSocket;\n\n    _classCallCheck(this, RxWebSocket);\n\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n    this.incomingDataSubject = new rxjs_1.Subject();\n    this.url = url.replace(/^http/, \"ws\");\n  }\n  /**\r\n   * Make a websocket connection\r\n   * @returns an Observable that completes when connected\r\n   */\n\n\n  _createClass(RxWebSocket, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this = this;\n\n      if (this.webSocket) {\n        return rxjs_1.throwError(new Error(\"webSocket object is not null\"));\n      }\n\n      return new rxjs_1.Observable(function (obs) {\n        var webSocket;\n\n        try {\n          _this.webSocket = webSocket = new _this.WebSocketClass(_this.url);\n        } catch (err) {\n          obs.error(err);\n          return;\n        }\n\n        _this.connectionStateSubject.next(ConnectionState.CONNECTING);\n\n        webSocket.onclose = function (evt) {\n          _this.clearWebSocket();\n\n          obs.error(new Error(\"websocket error \".concat(evt.code, \": \").concat(evt.reason)));\n\n          _this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n        };\n\n        webSocket.onopen = function (_) {\n          obs.next();\n          obs.complete();\n\n          _this.connectionStateSubject.next(ConnectionState.CONNECTED);\n        };\n\n        webSocket.onmessage = function (evt) {\n          _this.incomingDataSubject.next(evt.data);\n        };\n      }).pipe(operators_1.take(1));\n    }\n    /**\r\n     * Disconnect from server\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var webSocket = this.webSocket;\n\n      if (!webSocket) {\n        return;\n      }\n\n      this.clearWebSocket();\n      this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n\n      try {\n        webSocket.close();\n      } catch (_a) {}\n    }\n    /**\r\n     * Emit current connection state and subsequent changes\r\n     * @returns an Observable for the connection state\r\n     */\n\n  }, {\n    key: \"sendData\",\n\n    /**\r\n     * Send data to server\r\n     * @param data text to send\r\n     */\n    value: function sendData(data) {\n      var webSocket = this.webSocket;\n\n      if (!webSocket) {\n        throw new Error(\"websocket is not connected\");\n      }\n\n      webSocket.send(data);\n    }\n  }, {\n    key: \"clearWebSocket\",\n    value: function clearWebSocket() {\n      var webSocket = this.webSocket;\n\n      if (!webSocket) {\n        return;\n      }\n\n      this.webSocket = null;\n      webSocket.onclose = null;\n      webSocket.onerror = null;\n      webSocket.onmessage = null;\n      webSocket.onopen = null;\n    }\n  }, {\n    key: \"connectionState$\",\n    get: function get() {\n      return this.connectionStateSubject.asObservable();\n    }\n    /**\r\n     * Emit incoming data from server\r\n     * @returns an Observable for the data received\r\n     */\n\n  }, {\n    key: \"incomingData$\",\n    get: function get() {\n      return this.incomingDataSubject.asObservable();\n    }\n    /**\r\n     * Emit incoming JSON data from server. non-JSON data are ignored\r\n     * @returns an Observable for parsed JSON data\r\n     */\n\n  }, {\n    key: \"incomingJSONData$\",\n    get: function get() {\n      return this.incomingData$.pipe(operators_1.flatMap(function (m) {\n        var j;\n\n        try {\n          j = JSON.parse(m);\n        } catch (err) {\n          return rxjs_1.empty();\n        }\n\n        return rxjs_1.of(j);\n      }));\n    }\n  }]);\n\n  return RxWebSocket;\n}();\n\nexports.RxWebSocket = RxWebSocket;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/walletlink/dist/connection/RxWebSocket.js"],"names":["Object","defineProperty","exports","value","rxjs_1","require","operators_1","ConnectionState","RxWebSocket","url","WebSocketClass","WebSocket","webSocket","connectionStateSubject","BehaviorSubject","DISCONNECTED","incomingDataSubject","Subject","replace","throwError","Error","Observable","obs","err","error","next","CONNECTING","onclose","evt","clearWebSocket","code","reason","onopen","_","complete","CONNECTED","onmessage","data","pipe","take","close","_a","send","onerror","asObservable","incomingData$","flatMap","m","j","JSON","parse","empty","of"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\r\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\r\n// Licensed under the Apache License, version 2.0\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst rxjs_1 = require(\"rxjs\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nvar ConnectionState;\r\n(function (ConnectionState) {\r\n    ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\r\n    ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\r\n    ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\r\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\r\n/**\r\n * Rx-ified WebSocket\r\n */\r\nclass RxWebSocket {\r\n    /**\r\n     * Constructor\r\n     * @param url WebSocket server URL\r\n     * @param [WebSocketClass] Custom WebSocket implementation\r\n     */\r\n    constructor(url, WebSocketClass = WebSocket) {\r\n        this.WebSocketClass = WebSocketClass;\r\n        this.webSocket = null;\r\n        this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\r\n        this.incomingDataSubject = new rxjs_1.Subject();\r\n        this.url = url.replace(/^http/, \"ws\");\r\n    }\r\n    /**\r\n     * Make a websocket connection\r\n     * @returns an Observable that completes when connected\r\n     */\r\n    connect() {\r\n        if (this.webSocket) {\r\n            return rxjs_1.throwError(new Error(\"webSocket object is not null\"));\r\n        }\r\n        return new rxjs_1.Observable(obs => {\r\n            let webSocket;\r\n            try {\r\n                this.webSocket = webSocket = new this.WebSocketClass(this.url);\r\n            }\r\n            catch (err) {\r\n                obs.error(err);\r\n                return;\r\n            }\r\n            this.connectionStateSubject.next(ConnectionState.CONNECTING);\r\n            webSocket.onclose = evt => {\r\n                this.clearWebSocket();\r\n                obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\r\n                this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\r\n            };\r\n            webSocket.onopen = _ => {\r\n                obs.next();\r\n                obs.complete();\r\n                this.connectionStateSubject.next(ConnectionState.CONNECTED);\r\n            };\r\n            webSocket.onmessage = evt => {\r\n                this.incomingDataSubject.next(evt.data);\r\n            };\r\n        }).pipe(operators_1.take(1));\r\n    }\r\n    /**\r\n     * Disconnect from server\r\n     */\r\n    disconnect() {\r\n        const { webSocket } = this;\r\n        if (!webSocket) {\r\n            return;\r\n        }\r\n        this.clearWebSocket();\r\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\r\n        try {\r\n            webSocket.close();\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    /**\r\n     * Emit current connection state and subsequent changes\r\n     * @returns an Observable for the connection state\r\n     */\r\n    get connectionState$() {\r\n        return this.connectionStateSubject.asObservable();\r\n    }\r\n    /**\r\n     * Emit incoming data from server\r\n     * @returns an Observable for the data received\r\n     */\r\n    get incomingData$() {\r\n        return this.incomingDataSubject.asObservable();\r\n    }\r\n    /**\r\n     * Emit incoming JSON data from server. non-JSON data are ignored\r\n     * @returns an Observable for parsed JSON data\r\n     */\r\n    get incomingJSONData$() {\r\n        return this.incomingData$.pipe(operators_1.flatMap(m => {\r\n            let j;\r\n            try {\r\n                j = JSON.parse(m);\r\n            }\r\n            catch (err) {\r\n                return rxjs_1.empty();\r\n            }\r\n            return rxjs_1.of(j);\r\n        }));\r\n    }\r\n    /**\r\n     * Send data to server\r\n     * @param data text to send\r\n     */\r\n    sendData(data) {\r\n        const { webSocket } = this;\r\n        if (!webSocket) {\r\n            throw new Error(\"websocket is not connected\");\r\n        }\r\n        webSocket.send(data);\r\n    }\r\n    clearWebSocket() {\r\n        const { webSocket } = this;\r\n        if (!webSocket) {\r\n            return;\r\n        }\r\n        this.webSocket = null;\r\n        webSocket.onclose = null;\r\n        webSocket.onerror = null;\r\n        webSocket.onmessage = null;\r\n        webSocket.onopen = null;\r\n    }\r\n}\r\nexports.RxWebSocket = RxWebSocket;\r\n"]},"metadata":{},"sourceType":"script"}