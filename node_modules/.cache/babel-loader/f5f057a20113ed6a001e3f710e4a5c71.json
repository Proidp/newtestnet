{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _WETH_ONLY;import{ChainId,JSBI,Percent,Token,WETH}from'@pancakeswap-libs/sdk';export var ROUTER_ADDRESS='0x6F5CB4D7cBF18e068511c3B060B3e5A08411d2dD';// a list of tokens by chain\nvar swapChainId=ChainId.BSCTESTNET;export var DAI=new Token(swapChainId,'0x8a9424745056Eb399FD19a0EC26A14316684e274',18,'DAI','Dai Stablecoin');export var BUSD=new Token(swapChainId,'0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7',18,'BUSD','Binance USD');export var USDT=new Token(swapChainId,'0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684',18,'USDT','Tether USD');export var ETH=new Token(swapChainId,'0x8babbb98678facc7342735486c851abd7a0d17ca',18,'ETH','Ethereum');export var WBNB=new Token(swapChainId,'0xae13d989dac2f0debff460ac112a837c89baa7cd',18,'WBNB','Wrapped BNB');var WETH_ONLY=(_WETH_ONLY={},_defineProperty(_WETH_ONLY,ChainId.MAINNET,[WETH[ChainId.MAINNET]]),_defineProperty(_WETH_ONLY,ChainId.BSCTESTNET,[WETH[ChainId.BSCTESTNET]]),_WETH_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},swapChainId,[].concat(_toConsumableArray(WETH_ONLY[swapChainId]),[DAI,BUSD,USDT,ETH])));/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */export var CUSTOM_BASES=_defineProperty({},swapChainId,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},swapChainId,[].concat(_toConsumableArray(WETH_ONLY[swapChainId]),[DAI,BUSD,USDT])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},swapChainId,[].concat(_toConsumableArray(WETH_ONLY[swapChainId]),[DAI,BUSD,USDT])));export var PINNED_PAIRS=_defineProperty({},swapChainId,[[BUSD,WBNB],[USDT,BUSD],[USDT,WBNB],[DAI,USDT],[DAI,WBNB]]);export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=80;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","swapChainId","BSCTESTNET","DAI","BUSD","USDT","ETH","WBNB","WETH_ONLY","MAINNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\r\n\r\nexport const ROUTER_ADDRESS = '0x6F5CB4D7cBF18e068511c3B060B3e5A08411d2dD'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\nconst swapChainId = ChainId.BSCTESTNET\r\n\r\nexport const DAI = new Token(swapChainId, '0x8a9424745056Eb399FD19a0EC26A14316684e274', 18, 'DAI', 'Dai Stablecoin')\r\nexport const BUSD = new Token(swapChainId, '0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7', 18, 'BUSD', 'Binance USD')\r\nexport const USDT = new Token(swapChainId, '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684', 18, 'USDT', 'Tether USD')\r\nexport const ETH = new Token(swapChainId, '0x8babbb98678facc7342735486c851abd7a0d17ca', 18, 'ETH', 'Ethereum')\r\nexport const WBNB = new Token(swapChainId, '0xae13d989dac2f0debff460ac112a837c89baa7cd', 18, 'WBNB', 'Wrapped BNB')\r\n\r\nconst WETH_ONLY: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\r\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT, ETH],\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [swapChainId]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [swapChainId]: [\r\n    [BUSD, WBNB],\r\n    [USDT, BUSD],\r\n    [USDT, WBNB],\r\n    [DAI, USDT],\r\n    [DAI, WBNB],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much ETH so they end up with <.01\r\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\r\n"]},"metadata":{},"sourceType":"module"}