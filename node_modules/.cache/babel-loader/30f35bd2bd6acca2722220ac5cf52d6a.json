{"ast":null,"code":"'use strict';\n\nconst {\n  encoding: getCodec\n} = require('multibase');\n\nconst {\n  TextDecoder\n} = require('web-encoding');\n\nconst utf8Decoder = new TextDecoder('utf8');\n/**\r\n * @typedef {import('multibase/src/types').BaseName} BaseName\r\n */\n\n/**\r\n * Turns a Uint8Array of bytes into a string with each\r\n * character being the char code of the corresponding byte\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @returns {string}\r\n */\n\nfunction uint8ArrayToAsciiString(array) {\n  let string = '';\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i]);\n  }\n\n  return string;\n}\n/**\r\n * Turns a `Uint8Array` into a string.\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - The encoding to use\r\n * @returns {string}\r\n */\n\n\nfunction toString(array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array);\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array);\n  }\n\n  return getCodec(encoding).encode(array);\n}\n\nmodule.exports = toString;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/uint8arrays/to-string.js"],"names":["encoding","getCodec","require","TextDecoder","utf8Decoder","uint8ArrayToAsciiString","array","string","i","length","String","fromCharCode","toString","decode","encode","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,QAAQ,EAAEC;AAAZ,IAAyBC,OAAO,CAAC,WAAD,CAAtC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAME,WAAW,GAAG,IAAID,WAAJ,CAAgB,MAAhB,CAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,uBAAT,CAAkCC,KAAlC,EAAyC;AACvC,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,MAAM,IAAIG,MAAM,CAACC,YAAP,CAAoBL,KAAK,CAACE,CAAD,CAAzB,CAAV;AACD;;AACD,SAAOD,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,QAAT,CAAmBN,KAAnB,EAA0BN,QAAQ,GAAG,MAArC,EAA6C;AAC3C,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC/C,WAAOI,WAAW,CAACS,MAAZ,CAAmBP,KAAnB,CAAP;AACD;;AAED,MAAIN,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOK,uBAAuB,CAACC,KAAD,CAA9B;AACD;;AAED,SAAOL,QAAQ,CAACD,QAAD,CAAR,CAAmBc,MAAnB,CAA0BR,KAA1B,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBJ,QAAjB","sourcesContent":["'use strict'\r\n\r\nconst { encoding: getCodec } = require('multibase')\r\nconst { TextDecoder } = require('web-encoding')\r\nconst utf8Decoder = new TextDecoder('utf8')\r\n\r\n/**\r\n * @typedef {import('multibase/src/types').BaseName} BaseName\r\n */\r\n\r\n/**\r\n * Turns a Uint8Array of bytes into a string with each\r\n * character being the char code of the corresponding byte\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @returns {string}\r\n */\r\nfunction uint8ArrayToAsciiString (array) {\r\n  let string = ''\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    string += String.fromCharCode(array[i])\r\n  }\r\n  return string\r\n}\r\n\r\n/**\r\n * Turns a `Uint8Array` into a string.\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - The encoding to use\r\n * @returns {string}\r\n */\r\nfunction toString (array, encoding = 'utf8') {\r\n  if (encoding === 'utf8' || encoding === 'utf-8') {\r\n    return utf8Decoder.decode(array)\r\n  }\r\n\r\n  if (encoding === 'ascii') {\r\n    return uint8ArrayToAsciiString(array)\r\n  }\r\n\r\n  return getCodec(encoding).encode(array)\r\n}\r\n\r\nmodule.exports = toString\r\n"]},"metadata":{},"sourceType":"script"}