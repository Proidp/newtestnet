{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{addTransaction}from'./actions';// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var dispatch=useDispatch();return useCallback(function(response){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},summary=_ref.summary,approval=_ref.approval;if(!account)return;if(!chainId)return;var hash=response.hash;if(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash:hash,from:account,chainId:chainId,approval:approval,summary:summary}));},[dispatch,chainId,account]);}// returns all the transactions for the current chain\nexport function useAllTransactions(){var _state$chainId;var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var state=useSelector(function(s){return s.transactions;});return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useIsTransactionPending(transactionHash){var transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */export function isTransactionRecent(tx){return new Date().getTime()-tx.addedTime<86400000;}// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress,spender){var allTransactions=useAllTransactions();return useMemo(function(){return typeof tokenAddress==='string'&&typeof spender==='string'&&Object.keys(allTransactions).some(function(hash){var tx=allTransactions[hash];if(!tx)return false;if(tx.receipt){return false;}var approval=tx.approval;if(!approval)return false;return approval.spender===spender&&approval.tokenAddress===tokenAddress&&isTransactionRecent(tx);});},[allTransactions,spender,tokenAddress]);}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","hash","Error","from","useAllTransactions","state","s","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some"],"mappings":"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","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { addTransaction } from './actions'\r\nimport { TransactionDetails } from './reducer'\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } }\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {}\r\n    ) => {\r\n      if (!account) return\r\n      if (!chainId) return\r\n\r\n      const { hash } = response\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.')\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\r\n    },\r\n    [dispatch, chainId, account]\r\n  )\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  return chainId ? state[chainId] ?? {} : {}\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions()\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false\r\n\r\n  return !transactions[transactionHash].receipt\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions()\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash]\r\n        if (!tx) return false\r\n        if (tx.receipt) {\r\n          return false\r\n        }\r\n        const { approval } = tx\r\n        if (!approval) return false\r\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\r\n      }),\r\n    [allTransactions, spender, tokenAddress]\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}