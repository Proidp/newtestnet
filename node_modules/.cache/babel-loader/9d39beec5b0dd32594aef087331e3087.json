{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import contenthashToUri from'./contenthashToUri';import{parseENSAddress}from'./parseENSAddress';import uriToHttp from'./uriToHttp';// bakeryswap defaultTokenJson\nimport{DEFAULT_TOKEN_LIST_URL}from'../constants/lists';import defaultTokenJson from'../constants/token/pancakeswap.json';var tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */export default function getTokenList(_x,_x2){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl,resolveENSContentHash){var parsedENS,urls,_parsedENS$ensPath,contentHashUri,translatedUri,i,url,isLast,response,json,_tokenListValidator$e,_tokenListValidator$e2,validationErrors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(listUrl===DEFAULT_TOKEN_LIST_URL)){_context.next=2;break;}return _context.abrupt(\"return\",defaultTokenJson);case 2:parsedENS=parseENSAddress(listUrl);if(!parsedENS){_context.next=25;break;}_context.prev=4;_context.next=7;return resolveENSContentHash(parsedENS.ensName);case 7:contentHashUri=_context.sent;_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](4);console.error(\"Failed to resolve ENS name: \".concat(parsedENS.ensName),_context.t0);throw new Error(\"Failed to resolve ENS name: \".concat(parsedENS.ensName));case 14:_context.prev=14;translatedUri=contenthashToUri(contentHashUri);_context.next=22;break;case 18:_context.prev=18;_context.t1=_context[\"catch\"](14);console.error('Failed to translate contenthash to URI',contentHashUri);throw new Error(\"Failed to translate contenthash to URI: \".concat(contentHashUri));case 22:urls=uriToHttp(\"\".concat(translatedUri).concat((_parsedENS$ensPath=parsedENS.ensPath)!==null&&_parsedENS$ensPath!==void 0?_parsedENS$ensPath:''));_context.next=26;break;case 25:urls=uriToHttp(listUrl);case 26:i=0;case 27:if(!(i<urls.length)){_context.next=57;break;}url=urls[i];isLast=i===urls.length-1;response=void 0;_context.prev=31;_context.next=34;return fetch(url);case 34:response=_context.sent;_context.next=43;break;case 37:_context.prev=37;_context.t2=_context[\"catch\"](31);console.error('Failed to fetch list',listUrl,_context.t2);if(!isLast){_context.next=42;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 42:return _context.abrupt(\"continue\",54);case 43:if(response.ok){_context.next=47;break;}if(!isLast){_context.next=46;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 46:return _context.abrupt(\"continue\",54);case 47:_context.next=49;return response.json();case 49:json=_context.sent;if(tokenListValidator(json)){_context.next=53;break;}validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce(function(memo,error){var _error$message;var add=\"\".concat(error.dataPath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));case 53:return _context.abrupt(\"return\",json);case 54:i++;_context.next=27;break;case 57:throw new Error('Unrecognized list URL protocol.');case 58:case\"end\":return _context.stop();}}},_callee,null,[[4,10],[14,18],[31,37]]);}));return _getTokenList.apply(this,arguments);}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/utils/getTokenList.ts"],"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","DEFAULT_TOKEN_LIST_URL","defaultTokenJson","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","ensName","contentHashUri","console","error","Error","translatedUri","urls","ensPath","i","length","url","isLast","response","fetch","ok","json","validationErrors","errors","reduce","memo","add","dataPath","message"],"mappings":"qWACA,MAAOA,CAAAA,MAAP,KAAmB,gDAAnB,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA;AACA,OAASC,sBAAT,KAAuC,oBAAvC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qCAA7B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,GAAIN,CAAAA,GAAJ,CAAQ,CAAEO,SAAS,CAAE,IAAb,CAAR,EAA6BC,OAA7B,CAAqCT,MAArC,CAA3B,CAEA;AACA;AACA;AACA;AACA,GACA,uBAA8BU,CAAAA,YAA9B,qD,+FAAe,iBACbC,OADa,CAEbC,qBAFa,mRAITD,OAAO,GAAKN,sBAJH,0DAKJC,gBALI,SAOPO,SAPO,CAOKV,eAAe,CAACQ,OAAD,CAPpB,KAUTE,SAVS,gEAacD,CAAAA,qBAAqB,CAACC,SAAS,CAACC,OAAX,CAbnC,QAaTC,cAbS,gGAeTC,OAAO,CAACC,KAAR,uCAA6CJ,SAAS,CAACC,OAAvD,eAfS,KAgBH,IAAII,CAAAA,KAAJ,uCAAyCL,SAAS,CAACC,OAAnD,EAhBG,0BAoBTK,aAAa,CAAGjB,gBAAgB,CAACa,cAAD,CAAhC,CApBS,kFAsBTC,OAAO,CAACC,KAAR,CAAc,wCAAd,CAAwDF,cAAxD,EAtBS,KAuBH,IAAIG,CAAAA,KAAJ,mDAAqDH,cAArD,EAvBG,SAyBXK,IAAI,CAAGhB,SAAS,WAAIe,aAAJ,6BAAoBN,SAAS,CAACQ,OAA9B,yDAAyC,EAAzC,EAAhB,CAzBW,+BA2BXD,IAAI,CAAGhB,SAAS,CAACO,OAAD,CAAhB,CA3BW,QA6BJW,CA7BI,CA6BA,CA7BA,cA6BGA,CAAC,CAAGF,IAAI,CAACG,MA7BZ,2BA8BLC,GA9BK,CA8BCJ,IAAI,CAACE,CAAD,CA9BL,CA+BLG,MA/BK,CA+BIH,CAAC,GAAKF,IAAI,CAACG,MAAL,CAAc,CA/BxB,CAgCPG,QAhCO,gDAkCQC,CAAAA,KAAK,CAACH,GAAD,CAlCb,SAkCTE,QAlCS,iGAoCTV,OAAO,CAACC,KAAR,CAAc,sBAAd,CAAsCN,OAAtC,cApCS,IAqCLc,MArCK,+BAqCS,IAAIP,CAAAA,KAAJ,mCAAqCP,OAArC,EArCT,0DA0CNe,QAAQ,CAACE,EA1CH,8BA2CLH,MA3CK,+BA2CS,IAAIP,CAAAA,KAAJ,mCAAqCP,OAArC,EA3CT,8EAgDQe,CAAAA,QAAQ,CAACG,IAAT,EAhDR,SAgDLA,IAhDK,kBAiDNtB,kBAAkB,CAACsB,IAAD,CAjDZ,0BAkDHC,gBAlDG,gDAmDPvB,kBAAkB,CAACwB,MAnDZ,iDAmDP,uBAA2BC,MAA3B,CAA0C,SAACC,IAAD,CAAOhB,KAAP,CAAiB,oBACzD,GAAMiB,CAAAA,GAAG,WAAMjB,KAAK,CAACkB,QAAZ,6BAAwBlB,KAAK,CAACmB,OAA9B,iDAAyC,EAAzC,CAAT,CACA,MAAOH,CAAAA,IAAI,CAACV,MAAL,CAAc,CAAd,WAAqBU,IAArB,cAA8BC,GAA9B,YAAyCA,GAAzC,CAAP,CACD,CAHD,CAGG,EAHH,CAnDO,+DAsDG,eAtDH,MAuDH,IAAIhB,CAAAA,KAAJ,yCAA2CY,gBAA3C,EAvDG,yCAyDJD,IAzDI,UA6BoBP,CAAC,EA7BrB,qCA2DP,IAAIJ,CAAAA,KAAJ,CAAU,iCAAV,CA3DO,sF","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\n// bakeryswap defaultTokenJson\r\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists'\r\nimport defaultTokenJson from '../constants/token/pancakeswap.json'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>\r\n): Promise<TokenList> {\r\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\r\n    return defaultTokenJson\r\n  }\r\n  const parsedENS = parseENSAddress(listUrl)\r\n\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"]},"metadata":{},"sourceType":"module"}