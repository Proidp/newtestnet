{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk';\nexport const ROUTER_ADDRESS = '0x6F5CB4D7cBF18e068511c3B060B3e5A08411d2dD'; // a list of tokens by chain\n\nconst swapChainId = ChainId.BSCTESTNET;\nexport const DAI = new Token(swapChainId, '0x8a9424745056Eb399FD19a0EC26A14316684e274', 18, 'DAI', 'Dai Stablecoin');\nexport const BUSD = new Token(swapChainId, '0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7', 18, 'BUSD', 'Binance USD');\nexport const USDT = new Token(swapChainId, '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684', 18, 'USDT', 'Tether USD');\nexport const ETH = new Token(swapChainId, '0x8babbb98678facc7342735486c851abd7a0d17ca', 18, 'ETH', 'Ethereum');\nexport const WBNB = new Token(swapChainId, '0xae13d989dac2f0debff460ac112a837c89baa7cd', 18, 'WBNB', 'Wrapped BNB');\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n}; // used to construct intermediary pairs for trading\n\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WETH_ONLY,\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT, ETH]\n};\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\n\nexport const CUSTOM_BASES = {\n  [swapChainId]: {}\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = { ...WETH_ONLY,\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WETH_ONLY,\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT]\n};\nexport const PINNED_PAIRS = {\n  [swapChainId]: [[BUSD, WBNB], [USDT, BUSD], [USDT, WBNB], [DAI, USDT], [DAI, WBNB]]\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 80; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20; // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\n\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","swapChainId","BSCTESTNET","DAI","BUSD","USDT","ETH","WBNB","WETH_ONLY","MAINNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\r\n\r\nexport const ROUTER_ADDRESS = '0x6F5CB4D7cBF18e068511c3B060B3e5A08411d2dD'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\nconst swapChainId = ChainId.BSCTESTNET\r\n\r\nexport const DAI = new Token(swapChainId, '0x8a9424745056Eb399FD19a0EC26A14316684e274', 18, 'DAI', 'Dai Stablecoin')\r\nexport const BUSD = new Token(swapChainId, '0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7', 18, 'BUSD', 'Binance USD')\r\nexport const USDT = new Token(swapChainId, '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684', 18, 'USDT', 'Tether USD')\r\nexport const ETH = new Token(swapChainId, '0x8babbb98678facc7342735486c851abd7a0d17ca', 18, 'ETH', 'Ethereum')\r\nexport const WBNB = new Token(swapChainId, '0xae13d989dac2f0debff460ac112a837c89baa7cd', 18, 'WBNB', 'Wrapped BNB')\r\n\r\nconst WETH_ONLY: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\r\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT, ETH],\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [swapChainId]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [swapChainId]: [...WETH_ONLY[swapChainId], DAI, BUSD, USDT],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [swapChainId]: [\r\n    [BUSD, WBNB],\r\n    [USDT, BUSD],\r\n    [USDT, WBNB],\r\n    [DAI, USDT],\r\n    [DAI, WBNB],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much ETH so they end up with <.01\r\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\r\n"]},"metadata":{},"sourceType":"module"}