{"ast":null,"code":"import _objectSpread from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import _objectWithoutProperties from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  width: 0;\\n  position: relative;\\n  font-weight: 500;\\n  outline: none;\\n  border: none;\\n  flex: 1 1 auto;\\n  background-color: transparent;\\n  font-size: 16px;\\n  text-align: \",\";\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding: 0px;\\n  -webkit-appearance: textfield;\\n\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n\\n  [type='number'] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  ::-webkit-outer-spin-button,\\n  ::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n  }\\n\\n  ::placeholder {\\n    color: \",\";\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import styled from'styled-components';import{escapeRegExp}from'../../utils';var StyledInput=styled.input(_templateObject(),function(_ref){var error=_ref.error,theme=_ref.theme;return error?theme.colors.failure:theme.colors.text;},function(_ref2){var align=_ref2.align;return align&&align;},function(_ref3){var theme=_ref3.theme;return theme.colors.textSubtle;});var inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport var Input=/*#__PURE__*/React.memo(function InnerInput(_ref4){var value=_ref4.value,onUserInput=_ref4.onUserInput,placeholder=_ref4.placeholder,rest=_objectWithoutProperties(_ref4,[\"value\",\"onUserInput\",\"placeholder\"]);var enforcer=function enforcer(nextUserInput){if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};return/*#__PURE__*/_jsx(StyledInput,_objectSpread(_objectSpread({},rest),{},{value:value,onChange:function onChange(event){// replace commas with periods, because uniswap exclusively uses period as the decimal separator\nenforcer(event.target.value.replace(/,/g,'.'));}// universal input options\n,inputMode:\"decimal\",title:\"Token Amount\",autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0.0',minLength:1,maxLength:79,spellCheck:\"false\"}));});export default Input;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/components/NumericalInput/index.tsx"],"names":["React","styled","escapeRegExp","StyledInput","input","error","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","event","target","replace"],"mappings":"60CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,YAAT,KAA6B,aAA7B,CAEA,GAAMC,CAAAA,WAAW,CAAGF,MAAM,CAACG,KAAV,mBACN,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,KAAV,MAAUA,KAAV,OAAuBD,CAAAA,KAAK,CAAGC,KAAK,CAACC,MAAN,CAAaC,OAAhB,CAA0BF,KAAK,CAACC,MAAN,CAAaE,IAAnE,EADM,CAUD,mBAAGC,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,EAAIA,KAAxB,EAVC,CA+BJ,mBAAGJ,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaI,UAA5B,EA/BI,CAAjB,CAmCA,GAAMC,CAAAA,UAAU,CAAGC,MAAM,0BAAzB,CAAoD;AAEpD,MAAO,IAAMC,CAAAA,KAAK,cAAGd,KAAK,CAACe,IAAN,CAAW,QAASC,CAAAA,UAAT,OAWwC,IAVtEC,CAAAA,KAUsE,OAVtEA,KAUsE,CATtEC,WASsE,OATtEA,WASsE,CARtEC,WAQsE,OARtEA,WAQsE,CAPnEC,IAOmE,uEACtE,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAA2B,CAC1C,GAAIA,aAAa,GAAK,EAAlB,EAAwBV,UAAU,CAACW,IAAX,CAAgBrB,YAAY,CAACoB,aAAD,CAA5B,CAA5B,CAA0E,CACxEJ,WAAW,CAACI,aAAD,CAAX,CACD,CACF,CAJD,CAMA,mBACE,KAAC,WAAD,gCACMF,IADN,MAEE,KAAK,CAAEH,KAFT,CAGE,QAAQ,CAAE,kBAACO,KAAD,CAAW,CACnB;AACAH,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaR,KAAb,CAAmBS,OAAnB,CAA2B,IAA3B,CAAiC,GAAjC,CAAD,CAAR,CACD,CACD;AAPF,CAQE,SAAS,CAAC,SARZ,CASE,KAAK,CAAC,cATR,CAUE,YAAY,CAAC,KAVf,CAWE,WAAW,CAAC,KACZ;AAZF,CAaE,IAAI,CAAC,MAbP,CAcE,OAAO,CAAC,qBAdV,CAeE,WAAW,CAAEP,WAAW,EAAI,KAf9B,CAgBE,SAAS,CAAE,CAhBb,CAiBE,SAAS,CAAE,EAjBb,CAkBE,UAAU,CAAC,OAlBb,GADF,CAsBD,CAxCoB,CAAd,CA0CP,cAAeL,CAAAA,KAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={(event) => {\r\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title=\"Token Amount\"\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n"]},"metadata":{},"sourceType":"module"}