{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst types_1 = require(\"../types\");\n\nconst util_1 = require(\"../util\");\n\nconst TIMEOUT = 5 * 60 * 1000; // 5 minutes\n\nconst JSONRPC_TEMPLATE = {\n  jsonrpc: \"2.0\",\n  id: 0\n};\n\nclass FilterPolyfill {\n  constructor(provider) {\n    this.logFilters = new Map(); // <id, filter>\n\n    this.blockFilters = new Set(); // <id>\n\n    this.pendingTransactionFilters = new Set(); // <id, true>\n\n    this.cursors = new Map(); // <id, cursor>\n\n    this.timeouts = new Map(); // <id, setTimeout id>\n\n    this.nextFilterId = types_1.IntNumber(1);\n    this.provider = provider;\n  }\n\n  async newFilter(param) {\n    const filter = filterFromParam(param);\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, filter.fromBlock);\n    console.log(`Installing new log filter(${id}):`, filter, \"initial cursor position:\", cursor);\n    this.logFilters.set(id, filter);\n    this.setFilterTimeout(id);\n    return util_1.hexStringFromIntNumber(id);\n  }\n\n  async newBlockFilter() {\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, \"latest\");\n    console.log(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n    this.blockFilters.add(id);\n    this.setFilterTimeout(id);\n    return util_1.hexStringFromIntNumber(id);\n  }\n\n  async newPendingTransactionFilter() {\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, \"latest\");\n    console.log(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n    this.pendingTransactionFilters.add(id);\n    this.setFilterTimeout(id);\n    return util_1.hexStringFromIntNumber(id);\n  }\n\n  uninstallFilter(filterId) {\n    const id = util_1.intNumberFromHexString(filterId);\n    console.log(`Uninstalling filter (${id})`);\n    this.deleteFilter(id);\n    return true;\n  }\n\n  getFilterChanges(filterId) {\n    const id = util_1.intNumberFromHexString(filterId);\n\n    if (this.timeouts.has(id)) {\n      // extend timeout\n      this.setFilterTimeout(id);\n    }\n\n    if (this.logFilters.has(id)) {\n      return this.getLogFilterChanges(id);\n    } else if (this.blockFilters.has(id)) {\n      return this.getBlockFilterChanges(id);\n    } else if (this.pendingTransactionFilters.has(id)) {\n      return this.getPendingTransactionFilterChanges(id);\n    }\n\n    return Promise.resolve(filterNotFoundError());\n  }\n\n  async getFilterLogs(filterId) {\n    const id = util_1.intNumberFromHexString(filterId);\n    const filter = this.logFilters.get(id);\n\n    if (!filter) {\n      return filterNotFoundError();\n    }\n\n    return this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: \"eth_getLogs\",\n      params: [paramFromFilter(filter)]\n    }));\n  }\n\n  makeFilterId() {\n    return types_1.IntNumber(++this.nextFilterId);\n  }\n\n  sendAsyncPromise(request) {\n    return new Promise((resolve, reject) => {\n      this.provider.sendAsync(request, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (Array.isArray(response) || response == null) {\n          return reject(new Error(`unexpected response received: ${JSON.stringify(response)}`));\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  deleteFilter(id) {\n    console.log(`Deleting filter (${id})`);\n    this.logFilters.delete(id);\n    this.blockFilters.delete(id);\n    this.pendingTransactionFilters.delete(id);\n    this.cursors.delete(id);\n    this.timeouts.delete(id);\n  }\n\n  async getLogFilterChanges(id) {\n    const filter = this.logFilters.get(id);\n    const cursorPosition = this.cursors.get(id);\n\n    if (!cursorPosition || !filter) {\n      return filterNotFoundError();\n    }\n\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n    const toBlock = filter.toBlock === \"latest\" ? currentBlockHeight : filter.toBlock;\n\n    if (cursorPosition > currentBlockHeight) {\n      return emptyResult();\n    }\n\n    if (cursorPosition > filter.toBlock) {\n      return emptyResult();\n    }\n\n    console.log(`Fetching logs from ${cursorPosition} to ${toBlock} for filter ${id}`);\n    const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: \"eth_getLogs\",\n      params: [paramFromFilter(Object.assign(Object.assign({}, filter), {\n        fromBlock: cursorPosition,\n        toBlock\n      }))]\n    }));\n\n    if (Array.isArray(response.result)) {\n      const blocks = response.result.map(log => util_1.intNumberFromHexString(log.blockNumber || \"0x0\"));\n      const highestBlock = Math.max(...blocks);\n\n      if (highestBlock && highestBlock > cursorPosition) {\n        const newCursorPosition = types_1.IntNumber(highestBlock + 1);\n        console.log(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n        this.cursors.set(id, newCursorPosition);\n      }\n    }\n\n    return response;\n  }\n\n  async getBlockFilterChanges(id) {\n    const cursorPosition = this.cursors.get(id);\n\n    if (!cursorPosition) {\n      return filterNotFoundError();\n    }\n\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n\n    if (cursorPosition > currentBlockHeight) {\n      return emptyResult();\n    }\n\n    console.log(`Fetching blocks from ${cursorPosition} to ${currentBlockHeight} for filter (${id})`);\n    const blocks = (await Promise.all(util_1.range(cursorPosition, currentBlockHeight + 1).map(i => this.getBlockHashByNumber(types_1.IntNumber(i))))).filter(hash => !!hash);\n    const newCursorPosition = types_1.IntNumber(cursorPosition + blocks.length);\n    console.log(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n    this.cursors.set(id, newCursorPosition);\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      result: blocks\n    });\n  }\n\n  async getPendingTransactionFilterChanges(_id) {\n    // pending transaction filters are not supported\n    return Promise.resolve(emptyResult());\n  }\n\n  async setInitialCursorPosition(id, startBlock) {\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n    const initialCursorPosition = typeof startBlock === \"number\" && startBlock > currentBlockHeight ? startBlock : currentBlockHeight;\n    this.cursors.set(id, initialCursorPosition);\n    return initialCursorPosition;\n  }\n\n  setFilterTimeout(id) {\n    const existing = this.timeouts.get(id);\n\n    if (existing) {\n      window.clearTimeout(existing);\n    }\n\n    const timeout = window.setTimeout(() => {\n      console.log(`Filter (${id}) timed out`);\n      this.deleteFilter(id);\n    }, TIMEOUT);\n    this.timeouts.set(id, timeout);\n  }\n\n  async getCurrentBlockHeight() {\n    const {\n      result\n    } = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: \"eth_blockNumber\",\n      params: []\n    }));\n    return util_1.intNumberFromHexString(util_1.ensureHexString(result));\n  }\n\n  async getBlockHashByNumber(blockNumber) {\n    const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: \"eth_getBlockByNumber\",\n      params: [util_1.hexStringFromIntNumber(blockNumber), false]\n    }));\n\n    if (response.result && typeof response.result.hash === \"string\") {\n      return util_1.ensureHexString(response.result.hash);\n    }\n\n    return null;\n  }\n\n}\n\nexports.FilterPolyfill = FilterPolyfill;\n\nfunction filterFromParam(param) {\n  return {\n    fromBlock: intBlockHeightFromHexBlockHeight(param.fromBlock),\n    toBlock: intBlockHeightFromHexBlockHeight(param.toBlock),\n    addresses: param.address === undefined ? null : Array.isArray(param.address) ? param.address : [param.address],\n    topics: param.topics || []\n  };\n}\n\nexports.filterFromParam = filterFromParam;\n\nfunction paramFromFilter(filter) {\n  const param = {\n    fromBlock: hexBlockHeightFromIntBlockHeight(filter.fromBlock),\n    toBlock: hexBlockHeightFromIntBlockHeight(filter.toBlock),\n    topics: filter.topics\n  };\n\n  if (filter.addresses !== null) {\n    param.address = filter.addresses;\n  }\n\n  return param;\n}\n\nfunction intBlockHeightFromHexBlockHeight(value) {\n  if (value === undefined || value === \"latest\" || value === \"pending\") {\n    return \"latest\";\n  } else if (value === \"earliest\") {\n    return types_1.IntNumber(0);\n  } else if (util_1.isHexString(value)) {\n    return util_1.intNumberFromHexString(value);\n  }\n\n  throw new Error(`Invalid block option: ${value}`);\n}\n\nfunction hexBlockHeightFromIntBlockHeight(value) {\n  if (value === \"latest\") {\n    return value;\n  }\n\n  return util_1.hexStringFromIntNumber(value);\n}\n\nfunction filterNotFoundError() {\n  return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n    error: {\n      code: -32000,\n      message: \"filter not found\"\n    }\n  });\n}\n\nfunction emptyResult() {\n  return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n    result: []\n  });\n}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/walletlink/dist/provider/FilterPolyfill.js"],"names":["Object","defineProperty","exports","value","types_1","require","util_1","TIMEOUT","JSONRPC_TEMPLATE","jsonrpc","id","FilterPolyfill","constructor","provider","logFilters","Map","blockFilters","Set","pendingTransactionFilters","cursors","timeouts","nextFilterId","IntNumber","newFilter","param","filter","filterFromParam","makeFilterId","cursor","setInitialCursorPosition","fromBlock","console","log","set","setFilterTimeout","hexStringFromIntNumber","newBlockFilter","add","newPendingTransactionFilter","uninstallFilter","filterId","intNumberFromHexString","deleteFilter","getFilterChanges","has","getLogFilterChanges","getBlockFilterChanges","getPendingTransactionFilterChanges","Promise","resolve","filterNotFoundError","getFilterLogs","get","sendAsyncPromise","assign","method","params","paramFromFilter","request","reject","sendAsync","err","response","Array","isArray","Error","JSON","stringify","delete","cursorPosition","currentBlockHeight","getCurrentBlockHeight","toBlock","emptyResult","result","blocks","map","blockNumber","highestBlock","Math","max","newCursorPosition","all","range","i","getBlockHashByNumber","hash","length","_id","startBlock","initialCursorPosition","existing","window","clearTimeout","timeout","setTimeout","ensureHexString","intBlockHeightFromHexBlockHeight","addresses","address","undefined","topics","hexBlockHeightFromIntBlockHeight","isHexString","error","code","message"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\r\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\r\n// Licensed under the Apache License, version 2.0\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst types_1 = require(\"../types\");\r\nconst util_1 = require(\"../util\");\r\nconst TIMEOUT = 5 * 60 * 1000; // 5 minutes\r\nconst JSONRPC_TEMPLATE = {\r\n    jsonrpc: \"2.0\",\r\n    id: 0\r\n};\r\nclass FilterPolyfill {\r\n    constructor(provider) {\r\n        this.logFilters = new Map(); // <id, filter>\r\n        this.blockFilters = new Set(); // <id>\r\n        this.pendingTransactionFilters = new Set(); // <id, true>\r\n        this.cursors = new Map(); // <id, cursor>\r\n        this.timeouts = new Map(); // <id, setTimeout id>\r\n        this.nextFilterId = types_1.IntNumber(1);\r\n        this.provider = provider;\r\n    }\r\n    async newFilter(param) {\r\n        const filter = filterFromParam(param);\r\n        const id = this.makeFilterId();\r\n        const cursor = await this.setInitialCursorPosition(id, filter.fromBlock);\r\n        console.log(`Installing new log filter(${id}):`, filter, \"initial cursor position:\", cursor);\r\n        this.logFilters.set(id, filter);\r\n        this.setFilterTimeout(id);\r\n        return util_1.hexStringFromIntNumber(id);\r\n    }\r\n    async newBlockFilter() {\r\n        const id = this.makeFilterId();\r\n        const cursor = await this.setInitialCursorPosition(id, \"latest\");\r\n        console.log(`Installing new block filter (${id}) with initial cursor position:`, cursor);\r\n        this.blockFilters.add(id);\r\n        this.setFilterTimeout(id);\r\n        return util_1.hexStringFromIntNumber(id);\r\n    }\r\n    async newPendingTransactionFilter() {\r\n        const id = this.makeFilterId();\r\n        const cursor = await this.setInitialCursorPosition(id, \"latest\");\r\n        console.log(`Installing new block filter (${id}) with initial cursor position:`, cursor);\r\n        this.pendingTransactionFilters.add(id);\r\n        this.setFilterTimeout(id);\r\n        return util_1.hexStringFromIntNumber(id);\r\n    }\r\n    uninstallFilter(filterId) {\r\n        const id = util_1.intNumberFromHexString(filterId);\r\n        console.log(`Uninstalling filter (${id})`);\r\n        this.deleteFilter(id);\r\n        return true;\r\n    }\r\n    getFilterChanges(filterId) {\r\n        const id = util_1.intNumberFromHexString(filterId);\r\n        if (this.timeouts.has(id)) {\r\n            // extend timeout\r\n            this.setFilterTimeout(id);\r\n        }\r\n        if (this.logFilters.has(id)) {\r\n            return this.getLogFilterChanges(id);\r\n        }\r\n        else if (this.blockFilters.has(id)) {\r\n            return this.getBlockFilterChanges(id);\r\n        }\r\n        else if (this.pendingTransactionFilters.has(id)) {\r\n            return this.getPendingTransactionFilterChanges(id);\r\n        }\r\n        return Promise.resolve(filterNotFoundError());\r\n    }\r\n    async getFilterLogs(filterId) {\r\n        const id = util_1.intNumberFromHexString(filterId);\r\n        const filter = this.logFilters.get(id);\r\n        if (!filter) {\r\n            return filterNotFoundError();\r\n        }\r\n        return this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: \"eth_getLogs\", params: [paramFromFilter(filter)] }));\r\n    }\r\n    makeFilterId() {\r\n        return types_1.IntNumber(++this.nextFilterId);\r\n    }\r\n    sendAsyncPromise(request) {\r\n        return new Promise((resolve, reject) => {\r\n            this.provider.sendAsync(request, (err, response) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                if (Array.isArray(response) || response == null) {\r\n                    return reject(new Error(`unexpected response received: ${JSON.stringify(response)}`));\r\n                }\r\n                resolve(response);\r\n            });\r\n        });\r\n    }\r\n    deleteFilter(id) {\r\n        console.log(`Deleting filter (${id})`);\r\n        this.logFilters.delete(id);\r\n        this.blockFilters.delete(id);\r\n        this.pendingTransactionFilters.delete(id);\r\n        this.cursors.delete(id);\r\n        this.timeouts.delete(id);\r\n    }\r\n    async getLogFilterChanges(id) {\r\n        const filter = this.logFilters.get(id);\r\n        const cursorPosition = this.cursors.get(id);\r\n        if (!cursorPosition || !filter) {\r\n            return filterNotFoundError();\r\n        }\r\n        const currentBlockHeight = await this.getCurrentBlockHeight();\r\n        const toBlock = filter.toBlock === \"latest\" ? currentBlockHeight : filter.toBlock;\r\n        if (cursorPosition > currentBlockHeight) {\r\n            return emptyResult();\r\n        }\r\n        if (cursorPosition > filter.toBlock) {\r\n            return emptyResult();\r\n        }\r\n        console.log(`Fetching logs from ${cursorPosition} to ${toBlock} for filter ${id}`);\r\n        const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: \"eth_getLogs\", params: [\r\n                paramFromFilter(Object.assign(Object.assign({}, filter), { fromBlock: cursorPosition, toBlock }))\r\n            ] }));\r\n        if (Array.isArray(response.result)) {\r\n            const blocks = response.result.map(log => util_1.intNumberFromHexString(log.blockNumber || \"0x0\"));\r\n            const highestBlock = Math.max(...blocks);\r\n            if (highestBlock && highestBlock > cursorPosition) {\r\n                const newCursorPosition = types_1.IntNumber(highestBlock + 1);\r\n                console.log(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\r\n                this.cursors.set(id, newCursorPosition);\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n    async getBlockFilterChanges(id) {\r\n        const cursorPosition = this.cursors.get(id);\r\n        if (!cursorPosition) {\r\n            return filterNotFoundError();\r\n        }\r\n        const currentBlockHeight = await this.getCurrentBlockHeight();\r\n        if (cursorPosition > currentBlockHeight) {\r\n            return emptyResult();\r\n        }\r\n        console.log(`Fetching blocks from ${cursorPosition} to ${currentBlockHeight} for filter (${id})`);\r\n        const blocks = (await Promise.all(util_1.range(cursorPosition, currentBlockHeight + 1).map(i => this.getBlockHashByNumber(types_1.IntNumber(i))))).filter(hash => !!hash);\r\n        const newCursorPosition = types_1.IntNumber(cursorPosition + blocks.length);\r\n        console.log(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\r\n        this.cursors.set(id, newCursorPosition);\r\n        return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { result: blocks });\r\n    }\r\n    async getPendingTransactionFilterChanges(_id) {\r\n        // pending transaction filters are not supported\r\n        return Promise.resolve(emptyResult());\r\n    }\r\n    async setInitialCursorPosition(id, startBlock) {\r\n        const currentBlockHeight = await this.getCurrentBlockHeight();\r\n        const initialCursorPosition = typeof startBlock === \"number\" && startBlock > currentBlockHeight\r\n            ? startBlock\r\n            : currentBlockHeight;\r\n        this.cursors.set(id, initialCursorPosition);\r\n        return initialCursorPosition;\r\n    }\r\n    setFilterTimeout(id) {\r\n        const existing = this.timeouts.get(id);\r\n        if (existing) {\r\n            window.clearTimeout(existing);\r\n        }\r\n        const timeout = window.setTimeout(() => {\r\n            console.log(`Filter (${id}) timed out`);\r\n            this.deleteFilter(id);\r\n        }, TIMEOUT);\r\n        this.timeouts.set(id, timeout);\r\n    }\r\n    async getCurrentBlockHeight() {\r\n        const { result } = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: \"eth_blockNumber\", params: [] }));\r\n        return util_1.intNumberFromHexString(util_1.ensureHexString(result));\r\n    }\r\n    async getBlockHashByNumber(blockNumber) {\r\n        const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: \"eth_getBlockByNumber\", params: [util_1.hexStringFromIntNumber(blockNumber), false] }));\r\n        if (response.result && typeof response.result.hash === \"string\") {\r\n            return util_1.ensureHexString(response.result.hash);\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.FilterPolyfill = FilterPolyfill;\r\nfunction filterFromParam(param) {\r\n    return {\r\n        fromBlock: intBlockHeightFromHexBlockHeight(param.fromBlock),\r\n        toBlock: intBlockHeightFromHexBlockHeight(param.toBlock),\r\n        addresses: param.address === undefined\r\n            ? null\r\n            : Array.isArray(param.address)\r\n                ? param.address\r\n                : [param.address],\r\n        topics: param.topics || []\r\n    };\r\n}\r\nexports.filterFromParam = filterFromParam;\r\nfunction paramFromFilter(filter) {\r\n    const param = {\r\n        fromBlock: hexBlockHeightFromIntBlockHeight(filter.fromBlock),\r\n        toBlock: hexBlockHeightFromIntBlockHeight(filter.toBlock),\r\n        topics: filter.topics\r\n    };\r\n    if (filter.addresses !== null) {\r\n        param.address = filter.addresses;\r\n    }\r\n    return param;\r\n}\r\nfunction intBlockHeightFromHexBlockHeight(value) {\r\n    if (value === undefined || value === \"latest\" || value === \"pending\") {\r\n        return \"latest\";\r\n    }\r\n    else if (value === \"earliest\") {\r\n        return types_1.IntNumber(0);\r\n    }\r\n    else if (util_1.isHexString(value)) {\r\n        return util_1.intNumberFromHexString(value);\r\n    }\r\n    throw new Error(`Invalid block option: ${value}`);\r\n}\r\nfunction hexBlockHeightFromIntBlockHeight(value) {\r\n    if (value === \"latest\") {\r\n        return value;\r\n    }\r\n    return util_1.hexStringFromIntNumber(value);\r\n}\r\nfunction filterNotFoundError() {\r\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { error: { code: -32000, message: \"filter not found\" } });\r\n}\r\nfunction emptyResult() {\r\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { result: [] });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}