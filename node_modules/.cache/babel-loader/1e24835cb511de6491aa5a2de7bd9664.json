{"ast":null,"code":"'use strict';\n\nvar _require = require('multibase'),\n    getCodec = _require.encoding;\n\nvar _require2 = require('web-encoding'),\n    TextEncoder = _require2.TextEncoder;\n\nvar utf8Encoder = new TextEncoder();\n/**\r\n * @typedef {import('multibase/src/types').BaseName} BaseName\r\n */\n\n/**\r\n * Interprets each character in a string as a byte and\r\n * returns a Uint8Array of those bytes.\r\n *\r\n * @param {string} string - The string to turn into an array\r\n * @returns {Uint8Array}\r\n */\n\nfunction asciiStringToUint8Array(string) {\n  var array = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i);\n  }\n\n  return array;\n}\n/**\r\n * Create a `Uint8Array` from the passed string\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {string} string\r\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction fromString(string) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string);\n  }\n\n  return getCodec(encoding).decode(string);\n}\n\nmodule.exports = fromString;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/uint8arrays/from-string.js"],"names":["require","getCodec","encoding","TextEncoder","utf8Encoder","asciiStringToUint8Array","string","array","Uint8Array","length","i","charCodeAt","fromString","encode","decode","module","exports"],"mappings":"AAAA;;eAE+BA,OAAO,CAAC,WAAD,C;IAApBC,Q,YAAVC,Q;;gBACgBF,OAAO,CAAC,cAAD,C;IAAvBG,W,aAAAA,W;;AACR,IAAMC,WAAW,GAAG,IAAID,WAAJ,EAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,uBAAT,CAAkCC,MAAlC,EAA0C;AACxC,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAM,CAACG,MAAtB,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWJ,MAAM,CAACK,UAAP,CAAkBD,CAAlB,CAAX;AACD;;AAED,SAAOH,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,UAAT,CAAqBN,MAArB,EAAgD;AAAA,MAAnBJ,QAAmB,uEAAR,MAAQ;;AAC9C,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC/C,WAAOE,WAAW,CAACS,MAAZ,CAAmBP,MAAnB,CAAP;AACD;;AAED,MAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOG,uBAAuB,CAACC,MAAD,CAA9B;AACD;;AAED,SAAOL,QAAQ,CAACC,QAAD,CAAR,CAAmBY,MAAnB,CAA0BR,MAA1B,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBJ,UAAjB","sourcesContent":["'use strict'\r\n\r\nconst { encoding: getCodec } = require('multibase')\r\nconst { TextEncoder } = require('web-encoding')\r\nconst utf8Encoder = new TextEncoder()\r\n\r\n/**\r\n * @typedef {import('multibase/src/types').BaseName} BaseName\r\n */\r\n\r\n/**\r\n * Interprets each character in a string as a byte and\r\n * returns a Uint8Array of those bytes.\r\n *\r\n * @param {string} string - The string to turn into an array\r\n * @returns {Uint8Array}\r\n */\r\nfunction asciiStringToUint8Array (string) {\r\n  const array = new Uint8Array(string.length)\r\n\r\n  for (let i = 0; i < string.length; i++) {\r\n    array[i] = string.charCodeAt(i)\r\n  }\r\n\r\n  return array\r\n}\r\n\r\n/**\r\n * Create a `Uint8Array` from the passed string\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {string} string\r\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\r\n * @returns {Uint8Array}\r\n */\r\nfunction fromString (string, encoding = 'utf8') {\r\n  if (encoding === 'utf8' || encoding === 'utf-8') {\r\n    return utf8Encoder.encode(string)\r\n  }\r\n\r\n  if (encoding === 'ascii') {\r\n    return asciiStringToUint8Array(string)\r\n  }\r\n\r\n  return getCodec(encoding).decode(string)\r\n}\r\n\r\nmodule.exports = fromString\r\n"]},"metadata":{},"sourceType":"script"}