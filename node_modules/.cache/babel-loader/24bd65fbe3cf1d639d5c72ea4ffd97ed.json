{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"5f7f8547b90218002e9ce9dd\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: defaultApplicationId,\n      applicationSecretKey: null\n    };\n\n    if (apiKey == null) {\n      return apiKeyObj;\n    } // Parse applicationId and applicationSecretKey\n\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    }\n\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    const connection = {\n      url: `https:/\\/${host}/v1/${apiKey.applicationId}`\n    }; // Initialize empty headers\n\n    connection.headers = {}; // Apply application secret key\n\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"AAAA;;AAKA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAS,kBAAT,QAAmC,yBAAnC;AAEA,MAAM,oBAAoB,GAAG,0BAA7B;AAEA,OAAM,MAAO,cAAP,SAA8B,kBAA9B,CAAgD;AAIlD,SAAO,SAAP,CAAiB,MAAjB,EAA4B;AACxB,UAAM,SAAS,GAA4D;AACvE,MAAA,aAAa,EAAE,oBADwD;AAEvE,MAAA,oBAAoB,EAAE;AAFiD,KAA3E;;AAKA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAAE,aAAO,SAAP;AAAmB,KANjB,CAQxB;;;AACA,QAAI,OAAQ,MAAR,KAAoB,QAAxB,EAAkC;AAC9B,MAAA,SAAS,CAAC,aAAV,GAA0B,MAA1B;AAEH,KAHD,MAGO,IAAI,MAAM,CAAC,oBAAP,IAA+B,IAAnC,EAAyC;AAC5C,MAAA,MAAM,CAAC,cAAP,CAAuB,OAAQ,MAAM,CAAC,aAAf,KAAkC,QAAzD,EACI,gDADJ,EACsD,eADtD,EACuE,MAAM,CAAC,aAD9E;AAEA,MAAA,MAAM,CAAC,cAAP,CAAuB,OAAQ,MAAM,CAAC,oBAAf,KAAyC,QAAhE,EACI,8BADJ,EACoC,sBADpC,EAC4D,YAD5D;AAGA,MAAA,SAAS,CAAC,aAAV,GAA0B,MAAM,CAAC,aAAjC;AACA,MAAA,SAAS,CAAC,oBAAV,GAAiC,MAAM,CAAC,oBAAxC;AAEH,KATM,MASA,IAAI,MAAM,CAAC,aAAX,EAA0B;AAC7B,MAAA,SAAS,CAAC,aAAV,GAA0B,MAAM,CAAC,aAAjC;AACH;;AAED,WAAO,SAAP;AACH;;AAED,SAAO,MAAP,CAAc,OAAd,EAAgC,MAAhC,EAA2C;AACvC,QAAI,IAAI,GAAW,IAAnB;;AACA,YAAQ,OAAO,GAAG,OAAO,CAAC,IAAX,GAAkB,SAAjC;AACI,WAAK,WAAL;AACI,QAAA,IAAI,GAAG,kCAAP;AACA;;AACJ;AACI,QAAA,MAAM,CAAC,UAAP,CAAkB,qBAAlB,EAAyC,MAAM,CAAC,MAAP,CAAc,gBAAvD,EAAyE;AACrE,UAAA,QAAQ,EAAE,SAD2D;AAErE,UAAA,KAAK,EAAE;AAF8D,SAAzE;AALR;;AAWA,UAAM,UAAU,GAAmB;AAC/B,MAAA,GAAG,EAAG,YAAa,IAAK,OAAQ,MAAM,CAAC,aAAc;AADtB,KAAnC,CAbuC,CAiBvC;;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,EAArB,CAlBuC,CAoBvC;;AACA,QAAI,MAAM,CAAC,oBAAP,IAA+B,IAAnC,EAAyC;AACrC,MAAA,UAAU,CAAC,IAAX,GAAkB,EAAlB;AACA,MAAA,UAAU,CAAC,QAAX,GAAsB,MAAM,CAAC,oBAA7B;AACH;;AAED,WAAO,UAAP;AACH;;AAED,EAAA,mBAAmB,GAAA;AACf,WAAQ,KAAK,aAAL,KAAuB,oBAA/B;AACH;;AA/DiD","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\r\nconst defaultApplicationId = \"5f7f8547b90218002e9ce9dd\";\r\nexport class PocketProvider extends UrlJsonRpcProvider {\r\n    static getApiKey(apiKey) {\r\n        const apiKeyObj = {\r\n            applicationId: defaultApplicationId,\r\n            applicationSecretKey: null\r\n        };\r\n        if (apiKey == null) {\r\n            return apiKeyObj;\r\n        }\r\n        // Parse applicationId and applicationSecretKey\r\n        if (typeof (apiKey) === \"string\") {\r\n            apiKeyObj.applicationId = apiKey;\r\n        }\r\n        else if (apiKey.applicationSecretKey != null) {\r\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\r\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\r\n            apiKeyObj.applicationId = apiKey.applicationId;\r\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\r\n        }\r\n        else if (apiKey.applicationId) {\r\n            apiKeyObj.applicationId = apiKey.applicationId;\r\n        }\r\n        return apiKeyObj;\r\n    }\r\n    static getUrl(network, apiKey) {\r\n        let host = null;\r\n        switch (network ? network.name : \"unknown\") {\r\n            case \"homestead\":\r\n                host = \"eth-mainnet.gateway.pokt.network\";\r\n                break;\r\n            default:\r\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\r\n                    argument: \"network\",\r\n                    value: network\r\n                });\r\n        }\r\n        const connection = {\r\n            url: (`https:/\\/${host}/v1/${apiKey.applicationId}`),\r\n        };\r\n        // Initialize empty headers\r\n        connection.headers = {};\r\n        // Apply application secret key\r\n        if (apiKey.applicationSecretKey != null) {\r\n            connection.user = \"\";\r\n            connection.password = apiKey.applicationSecretKey;\r\n        }\r\n        return connection;\r\n    }\r\n    isCommunityResource() {\r\n        return (this.applicationId === defaultApplicationId);\r\n    }\r\n}\r\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}