{"ast":null,"code":"import{useEffect,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useBlockNumber}from'../application/hooks';import{addMulticallListeners,removeMulticallListeners,parseCallKey,toCallKey}from'./actions';function isMethodArg(x){return['string','number'].indexOf(typeof x)!==-1;}function isValidMethodArgs(x){return x===undefined||Array.isArray(x)&&x.every(function(xi){return isMethodArg(xi)||Array.isArray(xi)&&xi.every(isMethodArg);});}var INVALID_RESULT={valid:false,blockNumber:undefined,data:undefined};// use this options object\nexport var NEVER_RELOAD={blocksPerFetch:Infinity};// the lowest level call for subscribing to contract data\nfunction useCallsData(calls,options){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var callResults=useSelector(function(state){return state.multicall.callResults;});var dispatch=useDispatch();var serializedCallKeys=useMemo(function(){var _calls$filter$map$sor,_calls$filter,_calls$filter$map;return JSON.stringify((_calls$filter$map$sor=calls===null||calls===void 0?void 0:(_calls$filter=calls.filter(function(c){return Boolean(c);}))===null||_calls$filter===void 0?void 0:(_calls$filter$map=_calls$filter.map(toCallKey))===null||_calls$filter$map===void 0?void 0:_calls$filter$map.sort())!==null&&_calls$filter$map$sor!==void 0?_calls$filter$map$sor:[]);},[calls]);// update listeners when there is an actual change that persists for at least 100ms\nuseEffect(function(){var callKeys=JSON.parse(serializedCallKeys);if(!chainId||callKeys.length===0)return undefined;// eslint-disable-next-line @typescript-eslint/no-shadow\nvar calls=callKeys.map(function(key){return parseCallKey(key);});dispatch(addMulticallListeners({chainId:chainId,calls:calls,options:options}));return function(){dispatch(removeMulticallListeners({chainId:chainId,calls:calls,options:options}));};},[chainId,dispatch,options,serializedCallKeys]);return useMemo(function(){return(// @ts-ignore\ncalls.map(function(call){var _callResults$chainId;if(!chainId||!call)return INVALID_RESULT;var result=(_callResults$chainId=callResults[chainId])===null||_callResults$chainId===void 0?void 0:_callResults$chainId[toCallKey(call)];var data=(result===null||result===void 0?void 0:result.data)&&(result===null||result===void 0?void 0:result.data)!=='0x'?result.data:null;return{valid:true,data:data,blockNumber:result===null||result===void 0?void 0:result.blockNumber};}));},[callResults,calls,chainId]);}var INVALID_CALL_STATE={valid:false,result:undefined,loading:false,syncing:false,error:false};var LOADING_CALL_STATE={valid:true,result:undefined,loading:true,syncing:true,error:false};function toCallState(callResult,contractInterface,fragment,latestBlockNumber){if(!callResult)return INVALID_CALL_STATE;var valid=callResult.valid,data=callResult.data,blockNumber=callResult.blockNumber;if(!valid)return INVALID_CALL_STATE;if(valid&&!blockNumber)return LOADING_CALL_STATE;if(!contractInterface||!fragment||!latestBlockNumber)return LOADING_CALL_STATE;var success=data&&data.length>2;var syncing=(blockNumber!==null&&blockNumber!==void 0?blockNumber:0)<latestBlockNumber;var result;if(success&&data){try{result=contractInterface.decodeFunctionResult(fragment,data);}catch(error){console.error('Result data parsing failed',fragment,data);return{valid:true,loading:false,error:true,syncing:syncing,result:result};}}return{valid:true,loading:false,syncing:syncing,result:result,error:!success};}export function useSingleContractMultipleData(contract,methodName,callInputs,options){var fragment=useMemo(function(){var _contract$interface;return contract===null||contract===void 0?void 0:(_contract$interface=contract.interface)===null||_contract$interface===void 0?void 0:_contract$interface.getFunction(methodName);},[contract,methodName]);var calls=useMemo(function(){return contract&&fragment&&callInputs&&callInputs.length>0?callInputs.map(function(inputs){return{address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)};}):[];},[callInputs,contract,fragment]);var results=useCallsData(calls,options);var latestBlockNumber=useBlockNumber();return useMemo(function(){return results.map(function(result){return toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber);});},[fragment,contract,results,latestBlockNumber]);}export function useMultipleContractSingleData(addresses,contractInterface,methodName,callInputs,options){var fragment=useMemo(function(){return contractInterface.getFunction(methodName);},[contractInterface,methodName]);var callData=useMemo(function(){return fragment&&isValidMethodArgs(callInputs)?contractInterface.encodeFunctionData(fragment,callInputs):undefined;},[callInputs,contractInterface,fragment]);var calls=useMemo(function(){return fragment&&addresses&&addresses.length>0&&callData?addresses.map(function(address){return address&&callData?{address:address,callData:callData}:undefined;}):[];},[addresses,callData,fragment]);var results=useCallsData(calls,options);var latestBlockNumber=useBlockNumber();return useMemo(function(){return results.map(function(result){return toCallState(result,contractInterface,fragment,latestBlockNumber);});},[fragment,results,contractInterface,latestBlockNumber]);}export function useSingleCallResult(contract,methodName,inputs,options){var fragment=useMemo(function(){var _contract$interface2;return contract===null||contract===void 0?void 0:(_contract$interface2=contract.interface)===null||_contract$interface2===void 0?void 0:_contract$interface2.getFunction(methodName);},[contract,methodName]);var calls=useMemo(function(){return contract&&fragment&&isValidMethodArgs(inputs)?[{address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)}]:[];},[contract,fragment,inputs]);var result=useCallsData(calls,options)[0];var latestBlockNumber=useBlockNumber();return useMemo(function(){return toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber);},[result,contract,fragment,latestBlockNumber]);}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/state/multicall/hooks.ts"],"names":["useEffect","useMemo","useDispatch","useSelector","useActiveWeb3React","useBlockNumber","addMulticallListeners","removeMulticallListeners","parseCallKey","toCallKey","isMethodArg","x","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","blockNumber","data","NEVER_RELOAD","blocksPerFetch","Infinity","useCallsData","calls","options","chainId","callResults","state","multicall","dispatch","serializedCallKeys","JSON","stringify","filter","c","Boolean","map","sort","callKeys","parse","length","key","call","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","useSingleContractMultipleData","contract","methodName","callInputs","interface","getFunction","inputs","address","callData","encodeFunctionData","results","useMultipleContractSingleData","addresses","useSingleCallResult"],"mappings":"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","sourcesContent":["import { Interface, FunctionFragment } from '@ethersproject/abi'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  addMulticallListeners,\r\n  Call,\r\n  removeMulticallListeners,\r\n  parseCallKey,\r\n  toCallKey,\r\n  ListenerOptions,\r\n} from './actions'\r\n\r\nexport interface Result extends ReadonlyArray<any> {\r\n  readonly [key: string]: any\r\n}\r\n\r\ntype MethodArg = string | number | BigNumber\r\ntype MethodArgs = Array<MethodArg | MethodArg[]>\r\n\r\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\r\n\r\nfunction isMethodArg(x: unknown): x is MethodArg {\r\n  return ['string', 'number'].indexOf(typeof x) !== -1\r\n}\r\n\r\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\r\n  return (\r\n    x === undefined ||\r\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\r\n  )\r\n}\r\n\r\ninterface CallResult {\r\n  readonly valid: boolean\r\n  readonly data: string | undefined\r\n  readonly blockNumber: number | undefined\r\n}\r\n\r\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\r\n\r\n// use this options object\r\nexport const NEVER_RELOAD: ListenerOptions = {\r\n  blocksPerFetch: Infinity,\r\n}\r\n\r\n// the lowest level call for subscribing to contract data\r\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\r\n    (state) => state.multicall.callResults\r\n  )\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const serializedCallKeys: string = useMemo(\r\n    () =>\r\n      JSON.stringify(\r\n        calls\r\n          ?.filter((c): c is Call => Boolean(c))\r\n          ?.map(toCallKey)\r\n          ?.sort() ?? []\r\n      ),\r\n    [calls]\r\n  )\r\n\r\n  // update listeners when there is an actual change that persists for at least 100ms\r\n  useEffect(() => {\r\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\r\n    if (!chainId || callKeys.length === 0) return undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    const calls = callKeys.map((key) => parseCallKey(key))\r\n    dispatch(\r\n      addMulticallListeners({\r\n        chainId,\r\n        calls,\r\n        options,\r\n      })\r\n    )\r\n\r\n    return () => {\r\n      dispatch(\r\n        removeMulticallListeners({\r\n          chainId,\r\n          calls,\r\n          options,\r\n        })\r\n      )\r\n    }\r\n  }, [chainId, dispatch, options, serializedCallKeys])\r\n\r\n  return useMemo(\r\n    () =>\r\n      // @ts-ignore\r\n      calls.map<CallResult>((call) => {\r\n        if (!chainId || !call) return INVALID_RESULT\r\n\r\n        const result = callResults[chainId]?.[toCallKey(call)]\r\n        const data = result?.data && result?.data !== '0x' ? result.data : null\r\n\r\n        return { valid: true, data, blockNumber: result?.blockNumber }\r\n      }),\r\n    [callResults, calls, chainId]\r\n  )\r\n}\r\n\r\ninterface CallState {\r\n  readonly valid: boolean\r\n  // the result, or undefined if loading or errored/no data\r\n  readonly result: Result | undefined\r\n  // true if the result has never been fetched\r\n  readonly loading: boolean\r\n  // true if the result is not for the latest block\r\n  readonly syncing: boolean\r\n  // true if the call was made and is synced, but the return data is invalid\r\n  readonly error: boolean\r\n}\r\n\r\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\r\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\r\n\r\nfunction toCallState(\r\n  callResult: CallResult | undefined,\r\n  contractInterface: Interface | undefined,\r\n  fragment: FunctionFragment | undefined,\r\n  latestBlockNumber: number | undefined\r\n): CallState {\r\n  if (!callResult) return INVALID_CALL_STATE\r\n  const { valid, data, blockNumber } = callResult\r\n  if (!valid) return INVALID_CALL_STATE\r\n  if (valid && !blockNumber) return LOADING_CALL_STATE\r\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\r\n  const success = data && data.length > 2\r\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\r\n  let result: Result | undefined\r\n  if (success && data) {\r\n    try {\r\n      result = contractInterface.decodeFunctionResult(fragment, data)\r\n    } catch (error) {\r\n      console.error('Result data parsing failed', fragment, data)\r\n      return {\r\n        valid: true,\r\n        loading: false,\r\n        error: true,\r\n        syncing,\r\n        result,\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    valid: true,\r\n    loading: false,\r\n    syncing,\r\n    result,\r\n    error: !success,\r\n  }\r\n}\r\n\r\nexport function useSingleContractMultipleData(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  callInputs: OptionalMethodInputs[],\r\n  options?: ListenerOptions\r\n): CallState[] {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      contract && fragment && callInputs && callInputs.length > 0\r\n        ? callInputs.map<Call>((inputs) => {\r\n            return {\r\n              address: contract.address,\r\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n            }\r\n          })\r\n        : [],\r\n    [callInputs, contract, fragment]\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const latestBlockNumber = useBlockNumber()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber))\r\n  }, [fragment, contract, results, latestBlockNumber])\r\n}\r\n\r\nexport function useMultipleContractSingleData(\r\n  addresses: (string | undefined)[],\r\n  contractInterface: Interface,\r\n  methodName: string,\r\n  callInputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions\r\n): CallState[] {\r\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\r\n  const callData: string | undefined = useMemo(\r\n    () =>\r\n      fragment && isValidMethodArgs(callInputs)\r\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\r\n        : undefined,\r\n    [callInputs, contractInterface, fragment]\r\n  )\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      fragment && addresses && addresses.length > 0 && callData\r\n        ? addresses.map<Call | undefined>((address) => {\r\n            return address && callData\r\n              ? {\r\n                  address,\r\n                  callData,\r\n                }\r\n              : undefined\r\n          })\r\n        : [],\r\n    [addresses, callData, fragment]\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const latestBlockNumber = useBlockNumber()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber))\r\n  }, [fragment, results, contractInterface, latestBlockNumber])\r\n}\r\n\r\nexport function useSingleCallResult(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  inputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions\r\n): CallState {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo<Call[]>(() => {\r\n    return contract && fragment && isValidMethodArgs(inputs)\r\n      ? [\r\n          {\r\n            address: contract.address,\r\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n          },\r\n        ]\r\n      : []\r\n  }, [contract, fragment, inputs])\r\n\r\n  const result = useCallsData(calls, options)[0]\r\n  const latestBlockNumber = useBlockNumber()\r\n\r\n  return useMemo(() => {\r\n    return toCallState(result, contract?.interface, fragment, latestBlockNumber)\r\n  }, [result, contract, fragment, latestBlockNumber])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}