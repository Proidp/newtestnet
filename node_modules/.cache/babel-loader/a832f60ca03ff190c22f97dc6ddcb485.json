{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Screenshots = void 0;\n\nvar core_1 = require(\"../core\");\n\nvar Screenshots = /*#__PURE__*/function (_core_1$CrowdinApi) {\n  _inherits(Screenshots, _core_1$CrowdinApi);\n\n  var _super = _createSuper(Screenshots);\n\n  function Screenshots() {\n    _classCallCheck(this, Screenshots);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Screenshots, [{\n    key: \"listScreenshots\",\n\n    /**\r\n     * @param projectId project identifier\r\n     * @param limit maximum number of items to retrieve (default 25)\r\n     * @param offset starting offset in the collection (default 0)\r\n     */\n    value: function listScreenshots(projectId, limit, offset) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots\");\n      return this.getList(url, limit, offset);\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"addScreenshot\",\n    value: function addScreenshot(projectId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\n\n  }, {\n    key: \"getScreenshot\",\n    value: function getScreenshot(projectId, screenshotId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"updateScreenshot\",\n    value: function updateScreenshot(projectId, screenshotId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId);\n      return this.put(url, request, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\n\n  }, {\n    key: \"deleteScreenshot\",\n    value: function deleteScreenshot(projectId, screenshotId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"editScreenshot\",\n    value: function editScreenshot(projectId, screenshotId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId);\n      return this.patch(url, request, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param limit maximum number of items to retrieve (default 25)\r\n     * @param offset starting offset in the collection (default 0)\r\n     */\n\n  }, {\n    key: \"listScreenshotTags\",\n    value: function listScreenshotTags(projectId, screenshotId, limit, offset) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags\");\n      return this.getList(url, limit, offset);\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"replaceTags\",\n    value: function replaceTags(projectId, screenshotId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags\");\n      return this.put(url, request, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"addTag\",\n    value: function addTag(projectId, screenshotId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\n\n  }, {\n    key: \"clearTags\",\n    value: function clearTags(projectId, screenshotId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags\");\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     */\n\n  }, {\n    key: \"getTag\",\n    value: function getTag(projectId, screenshotId, tagId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags/\").concat(tagId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     */\n\n  }, {\n    key: \"deleteTag\",\n    value: function deleteTag(projectId, screenshotId, tagId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags/\").concat(tagId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     * @param request request body\r\n     */\n\n  }, {\n    key: \"updateTag\",\n    value: function updateTag(projectId, screenshotId, tagId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/screenshots/\").concat(screenshotId, \"/tags/\").concat(tagId);\n      return this.patch(url, request, this.defaultConfig());\n    }\n  }]);\n\n  return Screenshots;\n}(core_1.CrowdinApi);\n\nexports.Screenshots = Screenshots;","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/node_modules/@crowdin/crowdin-api-client/out/screenshots/index.js"],"names":["Object","defineProperty","exports","value","Screenshots","core_1","require","projectId","limit","offset","url","getList","request","post","defaultConfig","screenshotId","get","put","delete","patch","tagId","CrowdinApi"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Screenshots = void 0;\r\nconst core_1 = require(\"../core\");\r\nclass Screenshots extends core_1.CrowdinApi {\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param limit maximum number of items to retrieve (default 25)\r\n     * @param offset starting offset in the collection (default 0)\r\n     */\r\n    listScreenshots(projectId, limit, offset) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots`;\r\n        return this.getList(url, limit, offset);\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param request request body\r\n     */\r\n    addScreenshot(projectId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\r\n    getScreenshot(projectId, screenshotId) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\r\n    updateScreenshot(projectId, screenshotId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\r\n        return this.put(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\r\n    deleteScreenshot(projectId, screenshotId) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\r\n    editScreenshot(projectId, screenshotId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\r\n        return this.patch(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param limit maximum number of items to retrieve (default 25)\r\n     * @param offset starting offset in the collection (default 0)\r\n     */\r\n    listScreenshotTags(projectId, screenshotId, limit, offset) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\r\n        return this.getList(url, limit, offset);\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\r\n    replaceTags(projectId, screenshotId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\r\n        return this.put(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param request request body\r\n     */\r\n    addTag(projectId, screenshotId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     */\r\n    clearTags(projectId, screenshotId) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     */\r\n    getTag(projectId, screenshotId, tagId) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     */\r\n    deleteTag(projectId, screenshotId, tagId) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param screenshotId screenshot identifier\r\n     * @param tagId tag identifier\r\n     * @param request request body\r\n     */\r\n    updateTag(projectId, screenshotId, tagId, request) {\r\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\r\n        return this.patch(url, request, this.defaultConfig());\r\n    }\r\n}\r\nexports.Screenshots = Screenshots;\r\n"]},"metadata":{},"sourceType":"script"}