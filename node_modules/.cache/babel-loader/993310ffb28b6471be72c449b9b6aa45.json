{"ast":null,"code":"import{Contract}from'@ethersproject/contracts';import{getAddress}from'@ethersproject/address';import{AddressZero}from'@ethersproject/constants';import{BigNumber}from'@ethersproject/bignumber';import{abi as IUniswapV2Router02ABI}from'@uniswap/v2-periphery/build/IUniswapV2Router02.json';import{ChainId,JSBI,Percent,Token,ETHER}from'@pancakeswap-libs/sdk';import{ROUTER_ADDRESS}from'../constants';// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{return getAddress(value);}catch(_unused){return false;}}var BSCSCAN_PREFIXES={56:'',97:'testnet.'};export function getBscScanLink(chainId,data,type){var prefix=\"https://\".concat(BSCSCAN_PREFIXES[chainId]||BSCSCAN_PREFIXES[ChainId.MAINNET],\"bscscan.com\");switch(type){case'transaction':{return\"\".concat(prefix,\"/tx/\").concat(data);}case'token':{return\"\".concat(prefix,\"/token/\").concat(data);}case'address':default:{return\"\".concat(prefix,\"/address/\").concat(data);}}}// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address){var chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;var parsed=isAddress(address);if(!parsed){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return\"\".concat(parsed.substring(0,chars+2),\"...\").concat(parsed.substring(42-chars));}// add 10%\nexport function calculateGasMargin(value){return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));}// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num){return new Percent(JSBI.BigInt(Math.floor(num)),JSBI.BigInt(10000));}export function calculateSlippageAmount(value,slippage){if(slippage<0||slippage>10000){throw Error(\"Unexpected slippage value: \".concat(slippage));}return[JSBI.divide(JSBI.multiply(value.raw,JSBI.BigInt(10000-slippage)),JSBI.BigInt(10000)),JSBI.divide(JSBI.multiply(value.raw,JSBI.BigInt(10000+slippage)),JSBI.BigInt(10000))];}// account is not optional\nexport function getSigner(library,account){return library.getSigner(account).connectUnchecked();}// account is optional\nexport function getProviderOrSigner(library,account){return account?getSigner(library,account):library;}// account is optional\nexport function getContract(address,ABI,library,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(library,account));}// account is optional\nexport function getRouterContract(_,library,account){return getContract(ROUTER_ADDRESS,IUniswapV2Router02ABI,library,account);}export function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&');// $& means the whole matched string\n}export function isTokenOnList(defaultTokens,currency){var _defaultTokens$curren;if(currency===ETHER)return true;return Boolean(currency instanceof Token&&((_defaultTokens$curren=defaultTokens[currency.chainId])===null||_defaultTokens$curren===void 0?void 0:_defaultTokens$curren[currency.address]));}","map":{"version":3,"sources":["C:/Users/Prodip/Desktop/New folder/Newfolder1/XinoSwapTestnet/src/utils/index.ts"],"names":["Contract","getAddress","AddressZero","BigNumber","abi","IUniswapV2Router02ABI","ChainId","JSBI","Percent","Token","ETHER","ROUTER_ADDRESS","isAddress","value","BSCSCAN_PREFIXES","getBscScanLink","chainId","data","type","prefix","MAINNET","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","Math","floor","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isTokenOnList","defaultTokens","currency","Boolean"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@pancakeswap-libs/sdk'\r\nimport { ROUTER_ADDRESS } from '../constants'\r\nimport { TokenAddressMap } from '../state/lists/hooks'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nconst BSCSCAN_PREFIXES: { [chainId in ChainId]: string } = {\r\n  56: '',\r\n  97: 'testnet.'\r\n}\r\n\r\nexport function getBscScanLink(chainId: ChainId, data: string, type: 'transaction' | 'token' | 'address'): string {\r\n  const prefix = `https://${BSCSCAN_PREFIXES[chainId] || BSCSCAN_PREFIXES[ChainId.MAINNET]}bscscan.com`\r\n\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${prefix}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${prefix}/token/${data}`\r\n    }\r\n    case 'address':\r\n    default: {\r\n      return `${prefix}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address)\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(Math.floor(num)), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}